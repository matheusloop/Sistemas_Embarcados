
Exemple_Temperature_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e3  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  88:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_Init>:
// ||Função para recepção de um frame de 5 a 8bits||
uint8_t UART_Receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); //Espera o dado ser recebido
	return UDR0; //Lê o dado recebido e retorna
}
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  9e:	8e e0       	ldi	r24, 0x0E	; 14
  a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  a4:	08 95       	ret

000000a6 <UART_Transmit>:
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <UART_Transmit>
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	08 95       	ret

000000b4 <sendASCII>:

void sendASCII(uint16_t num) {
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	7c 01       	movw	r14, r24
	uint16_t divisor = 10000;

	for (int i = 0; i < 5; i++) {
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
	while(!(UCSR0A & (1<<RXC0))); //Espera o dado ser recebido
	return UDR0; //Lê o dado recebido e retorna
}

void sendASCII(uint16_t num) {
	uint16_t divisor = 10000;
  c6:	00 e1       	ldi	r16, 0x10	; 16
  c8:	17 e2       	ldi	r17, 0x27	; 39

	for (int i = 0; i < 5; i++) {
  ca:	35 c0       	rjmp	.+106    	; 0x136 <sendASCII+0x82>
		uint8_t digit = (num / divisor) % 10;
  cc:	c7 01       	movw	r24, r14
  ce:	b8 01       	movw	r22, r16
  d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodhi4>
  d4:	ab 01       	movw	r20, r22
  d6:	9b 01       	movw	r18, r22
  d8:	ad ec       	ldi	r26, 0xCD	; 205
  da:	bc ec       	ldi	r27, 0xCC	; 204
  dc:	0e 94 12 01 	call	0x224	; 0x224 <__umulhisi3>
  e0:	96 95       	lsr	r25
  e2:	87 95       	ror	r24
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
  ec:	9c 01       	movw	r18, r24
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	82 0f       	add	r24, r18
 100:	93 1f       	adc	r25, r19
 102:	9a 01       	movw	r18, r20
 104:	28 1b       	sub	r18, r24
 106:	39 0b       	sbc	r19, r25
 108:	c9 01       	movw	r24, r18
		UART_Transmit('0' + digit);
 10a:	80 5d       	subi	r24, 0xD0	; 208
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <sendASCII+0x60>
 118:	00 c0       	rjmp	.+0      	; 0x11a <sendASCII+0x66>
 11a:	00 00       	nop
		_delay_ms(2);
		divisor /= 10;
 11c:	98 01       	movw	r18, r16
 11e:	ad ec       	ldi	r26, 0xCD	; 205
 120:	bc ec       	ldi	r27, 0xCC	; 204
 122:	0e 94 12 01 	call	0x224	; 0x224 <__umulhisi3>
 126:	8c 01       	movw	r16, r24
 128:	16 95       	lsr	r17
 12a:	07 95       	ror	r16
 12c:	16 95       	lsr	r17
 12e:	07 95       	ror	r16
 130:	16 95       	lsr	r17
 132:	07 95       	ror	r16
}

void sendASCII(uint16_t num) {
	uint16_t divisor = 10000;

	for (int i = 0; i < 5; i++) {
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	c5 30       	cpi	r28, 0x05	; 5
 138:	d1 05       	cpc	r29, r1
 13a:	44 f2       	brlt	.-112    	; 0xcc <sendASCII+0x18>
		UART_Transmit('0' + digit);
		_delay_ms(2);
		divisor /= 10;
	}
	
	UART_Transmit('\n');
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Transmit>
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <__vector_21>:


ISR(ADC_vect){
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	leitura_ADC = ADC;
 172:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 176:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sendASCII(leitura_ADC);
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <sendASCII>
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <main>:

 int main(void){
	 
	UART_Init(MYUBRR);
 1a8:	87 e6       	ldi	r24, 0x67	; 103
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 48 00 	call	0x90	; 0x90 <UART_Init>
	 
	//GPIO
	DDRC  &= ~(1<<0); //Porta C0 como entrada
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<0); //Desabilita o pullup do PC0
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	88 b9       	out	0x08, r24	; 8

	//Configura ADC
	ADMUX = 0b01000000; //Tensão interna de ref (1.1V), canal 0
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11101111; //habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
 1c2:	8f ee       	ldi	r24, 0xEF	; 239
 1c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; //modo de conversão contínua
 1c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00111110; //habilita pino PC0 como entrada do ADC0
 1cc:	8e e3       	ldi	r24, 0x3E	; 62
 1ce:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	sei();
 1d2:	78 94       	sei

	DDRD |= (1<<2);
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	8b b9       	out	0x0b, r24	; 11


	while(1){
		PORTD ^= (1<<2);
 1e0:	9b b1       	in	r25, 0x0b	; 11
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	89 27       	eor	r24, r25
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	89 e6       	ldi	r24, 0x69	; 105
 1ec:	98 e1       	ldi	r25, 0x18	; 24
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x46>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x50>
 1f8:	00 00       	nop
 1fa:	f2 cf       	rjmp	.-28     	; 0x1e0 <main+0x38>

000001fc <__udivmodhi4>:
 1fc:	aa 1b       	sub	r26, r26
 1fe:	bb 1b       	sub	r27, r27
 200:	51 e1       	ldi	r21, 0x11	; 17
 202:	07 c0       	rjmp	.+14     	; 0x212 <__udivmodhi4_ep>

00000204 <__udivmodhi4_loop>:
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	a6 17       	cp	r26, r22
 20a:	b7 07       	cpc	r27, r23
 20c:	10 f0       	brcs	.+4      	; 0x212 <__udivmodhi4_ep>
 20e:	a6 1b       	sub	r26, r22
 210:	b7 0b       	sbc	r27, r23

00000212 <__udivmodhi4_ep>:
 212:	88 1f       	adc	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	5a 95       	dec	r21
 218:	a9 f7       	brne	.-22     	; 0x204 <__udivmodhi4_loop>
 21a:	80 95       	com	r24
 21c:	90 95       	com	r25
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	08 95       	ret

00000224 <__umulhisi3>:
 224:	a2 9f       	mul	r26, r18
 226:	b0 01       	movw	r22, r0
 228:	b3 9f       	mul	r27, r19
 22a:	c0 01       	movw	r24, r0
 22c:	a3 9f       	mul	r26, r19
 22e:	70 0d       	add	r23, r0
 230:	81 1d       	adc	r24, r1
 232:	11 24       	eor	r1, r1
 234:	91 1d       	adc	r25, r1
 236:	b2 9f       	mul	r27, r18
 238:	70 0d       	add	r23, r0
 23a:	81 1d       	adc	r24, r1
 23c:	11 24       	eor	r1, r1
 23e:	91 1d       	adc	r25, r1
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
