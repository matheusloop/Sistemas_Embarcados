
Exemple_Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce4  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000947  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005de  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000387  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 33 01 	call	0x266	; 0x266 <main>
  9e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupSevenSegmentDisplay>:
	0x7F, 0x7B, 0x77, 0x1F,
	0x4E, 0x3D, 0x4F, 0x47
};

void setupSevenSegmentDisplay(void) {
	DDRD |= 0x7F;   // PORTD como saída (segmentos)
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 67       	ori	r24, 0x7F	; 127
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x0F;  // PB0–PB3 como saída (seleção dos dígitos)
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	08 95       	ret

000000b4 <showSevenSegmentDisplayValue>:
	
	return;
}

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
	if (value < 16) {
  b4:	80 31       	cpi	r24, 0x10	; 16
  b6:	58 f4       	brcc	.+22     	; 0xce <showSevenSegmentDisplayValue+0x1a>
		PORTD &= 0x80; //Limpa os 7 últimos bits da porta D
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	90 78       	andi	r25, 0x80	; 128
  bc:	9b b9       	out	0x0b, r25	; 11
		PORTD |= sevenSegmentCode[value];  // Define o valor a ser mostrado
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 50       	subi	r30, 0x00	; 0
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	89 2b       	or	r24, r25
  cc:	8b b9       	out	0x0b, r24	; 11
	}

	PORTB &= 0xF0;                         // Limpa PB0–PB3
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	85 b9       	out	0x05, r24	; 5
	PORTB |= ((1 << displayAddress) & 0x0F); // Ativa o display desejado
  d4:	25 b1       	in	r18, 0x05	; 5
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <showSevenSegmentDisplayValue+0x2c>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <showSevenSegmentDisplayValue+0x28>
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	82 2b       	or	r24, r18
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	08 95       	ret

000000ec <cleanSevenSegmentDisplay>:
	
	return;
}

void cleanSevenSegmentDisplay(void) {
	PORTB &= 0xF0;  // Limpa PB0–PB3
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <showAllSevenSegmentDisplay>:
	
	return;
}

void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	08 2f       	mov	r16, r24
  fe:	16 2f       	mov	r17, r22
 100:	d4 2f       	mov	r29, r20
 102:	c2 2f       	mov	r28, r18
	
	cleanSevenSegmentDisplay();
 104:	0e 94 76 00 	call	0xec	; 0xec <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 2f       	mov	r24, r16
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <showSevenSegmentDisplayValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <showAllSevenSegmentDisplay+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <showAllSevenSegmentDisplay+0x26>
 11a:	00 00       	nop
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 11c:	0e 94 76 00 	call	0xec	; 0xec <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 2f       	mov	r24, r17
 124:	0e 94 5a 00 	call	0xb4	; 0xb4 <showSevenSegmentDisplayValue>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <showAllSevenSegmentDisplay+0x38>
 130:	00 c0       	rjmp	.+0      	; 0x132 <showAllSevenSegmentDisplay+0x3e>
 132:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 134:	0e 94 76 00 	call	0xec	; 0xec <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	8d 2f       	mov	r24, r29
 13c:	0e 94 5a 00 	call	0xb4	; 0xb4 <showSevenSegmentDisplayValue>
 140:	8f e3       	ldi	r24, 0x3F	; 63
 142:	9f e1       	ldi	r25, 0x1F	; 31
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <showAllSevenSegmentDisplay+0x50>
 148:	00 c0       	rjmp	.+0      	; 0x14a <showAllSevenSegmentDisplay+0x56>
 14a:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 14c:	0e 94 76 00 	call	0xec	; 0xec <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 5a 00 	call	0xb4	; 0xb4 <showSevenSegmentDisplayValue>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <showAllSevenSegmentDisplay+0x68>
 160:	00 c0       	rjmp	.+0      	; 0x162 <showAllSevenSegmentDisplay+0x6e>
 162:	00 00       	nop
	_delay_ms(2);
	
	return;
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <setupButtons>:
// Vetor de handlers para os botões PB4–PB7
static volatile button_handler_t button_handlers[4] = {0};

void setupButtons(void) {
    // Configura PC0–PC3 como entrada
    DDRC &= 0x0F;
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	87 b9       	out	0x07, r24	; 7

    // Ativa pull-ups nos pinos PC0–PC3
    PORTC |= 0xF0;
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 6f       	ori	r24, 0xF0	; 240
 178:	88 b9       	out	0x08, r24	; 8

    // Habilita interrupção de pino para PCINT0 (PC0–PC3)
    PCICR |= (1 << PCIE1);
 17a:	e8 e6       	ldi	r30, 0x68	; 104
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
    PCMSK1 |= 0x0F;  // Máscara para PC0–PC3
 184:	ec e6       	ldi	r30, 0x6C	; 108
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 60       	ori	r24, 0x0F	; 15
 18c:	80 83       	st	Z, r24

    sei();  // Habilita interrupções globais
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <register_button_callback>:
}

void register_button_callback(ButtonPin button, button_callback_t callback, void* arg) {
    if (button >= BUTTON_A && button <= BUTTON_D) {
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	60 f4       	brcc	.+24     	; 0x1ae <register_button_callback+0x1c>
        button_handlers[button].callback = callback;
 196:	e8 2f       	mov	r30, r24
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e0 5f       	subi	r30, 0xF0	; 240
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	71 83       	std	Z+1, r23	; 0x01
 1a8:	60 83       	st	Z, r22
        button_handlers[button].arg = arg;
 1aa:	53 83       	std	Z+3, r21	; 0x03
 1ac:	42 83       	std	Z+2, r20	; 0x02
 1ae:	08 95       	ret

000001b0 <__vector_4>:
    }
}

// Interrupção do grupo PCINT0 (PC0–PC3)
ISR(PCINT1_vect) {
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	cf 93       	push	r28
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
    for (uint8_t pin = 0; pin < 4; pin++) {
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	21 c0       	rjmp	.+66     	; 0x21a <__vector_4+0x6a>
        if (!(PINC & (1 << pin)) && button_handlers[pin].callback) {
 1d8:	86 b1       	in	r24, 0x06	; 6
 1da:	2c 2f       	mov	r18, r28
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0c 2e       	mov	r0, r28
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__vector_4+0x38>
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <__vector_4+0x34>
 1ec:	80 fd       	sbrc	r24, 0
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <__vector_4+0x68>
 1f0:	f9 01       	movw	r30, r18
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 5f       	subi	r30, 0xF0	; 240
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	89 2b       	or	r24, r25
 204:	49 f0       	breq	.+18     	; 0x218 <__vector_4+0x68>
            button_handlers[pin].callback(button_handlers[pin].arg);
 206:	df 01       	movw	r26, r30
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	8d 91       	ld	r24, X+
 212:	9c 91       	ld	r25, X
 214:	13 97       	sbiw	r26, 0x03	; 3
 216:	09 95       	icall
    }
}

// Interrupção do grupo PCINT0 (PC0–PC3)
ISR(PCINT1_vect) {
    for (uint8_t pin = 0; pin < 4; pin++) {
 218:	cf 5f       	subi	r28, 0xFF	; 255
 21a:	c4 30       	cpi	r28, 0x04	; 4
 21c:	e8 f2       	brcs	.-70     	; 0x1d8 <__vector_4+0x28>
        if (!(PINC & (1 << pin)) && button_handlers[pin].callback) {
            button_handlers[pin].callback(button_handlers[pin].arg);
        }
    }
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	cf 91       	pop	r28
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <addNum>:
#include <avr/io.h>

#include "../../Seven_Segment_Display/Seven_Segment_Display_Lib/seven_segment_display.h"
#include "../Buttons_Lib/buttons.h"

void addNum(void* arg){
 242:	fc 01       	movw	r30, r24
	uint8_t* num = (uint8_t*)arg;
	
	(*num)++; (*num) %= 10;
 244:	20 81       	ld	r18, Z
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	9d ec       	ldi	r25, 0xCD	; 205
 24a:	29 9f       	mul	r18, r25
 24c:	91 2d       	mov	r25, r1
 24e:	11 24       	eor	r1, r1
 250:	96 95       	lsr	r25
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
 256:	99 0f       	add	r25, r25
 258:	39 2f       	mov	r19, r25
 25a:	33 0f       	add	r19, r19
 25c:	33 0f       	add	r19, r19
 25e:	93 0f       	add	r25, r19
 260:	29 1b       	sub	r18, r25
 262:	20 83       	st	Z, r18
 264:	08 95       	ret

00000266 <main>:
}

int main(void)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <main+0x6>
 26c:	00 d0       	rcall	.+0      	; 0x26e <main+0x8>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */	
	uint8_t numU = 0, numD = 0, numC = 0, numM = 0;
 272:	19 82       	std	Y+1, r1	; 0x01
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	1b 82       	std	Y+3, r1	; 0x03
 278:	1c 82       	std	Y+4, r1	; 0x04
	
	setupButtons();
 27a:	0e 94 b7 00 	call	0x16e	; 0x16e <setupButtons>
	setupSevenSegmentDisplay();
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <setupSevenSegmentDisplay>
	
	register_button_callback(BUTTON_A, addNum, &numM);
 282:	ae 01       	movw	r20, r28
 284:	4c 5f       	subi	r20, 0xFC	; 252
 286:	5f 4f       	sbci	r21, 0xFF	; 255
 288:	61 e2       	ldi	r22, 0x21	; 33
 28a:	71 e0       	ldi	r23, 0x01	; 1
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 c9 00 	call	0x192	; 0x192 <register_button_callback>
	register_button_callback(BUTTON_B, addNum, &numC);
 292:	ae 01       	movw	r20, r28
 294:	4d 5f       	subi	r20, 0xFD	; 253
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	61 e2       	ldi	r22, 0x21	; 33
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 c9 00 	call	0x192	; 0x192 <register_button_callback>
	register_button_callback(BUTTON_C, addNum, &numD);
 2a2:	ae 01       	movw	r20, r28
 2a4:	4e 5f       	subi	r20, 0xFE	; 254
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	61 e2       	ldi	r22, 0x21	; 33
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 c9 00 	call	0x192	; 0x192 <register_button_callback>
	register_button_callback(BUTTON_D, addNum, &numU);
 2b2:	ae 01       	movw	r20, r28
 2b4:	4f 5f       	subi	r20, 0xFF	; 255
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	61 e2       	ldi	r22, 0x21	; 33
 2ba:	71 e0       	ldi	r23, 0x01	; 1
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 c9 00 	call	0x192	; 0x192 <register_button_callback>
	
	
    while (1) {
		showAllSevenSegmentDisplay(numM, numC, numD, numU);
 2c2:	29 81       	ldd	r18, Y+1	; 0x01
 2c4:	4a 81       	ldd	r20, Y+2	; 0x02
 2c6:	6b 81       	ldd	r22, Y+3	; 0x03
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <showAllSevenSegmentDisplay>
 2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <main+0x5c>

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
