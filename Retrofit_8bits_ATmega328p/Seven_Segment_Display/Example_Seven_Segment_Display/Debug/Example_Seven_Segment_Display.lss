
Example_Seven_Segment_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e4  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000429  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e8  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  8e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setupSevenSegmentDisplay>:
	0x7F, 0x7B, 0x77, 0x1F,
	0x4E, 0x3D, 0x4F, 0x47
};

void setupSevenSegmentDisplay(void) {
	DDRD |= 0x7F;   // PORTD como saÃ­da (segmentos)
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f 67       	ori	r24, 0x7F	; 127
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0x0F;  // PB0â€“PB3 como saÃ­da (seleÃ§Ã£o dos dÃ­gitos)
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	08 95       	ret

000000a4 <showSevenSegmentDisplayValue>:
	
	return;
}

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
	if (value < 16) {
  a4:	80 31       	cpi	r24, 0x10	; 16
  a6:	58 f4       	brcc	.+22     	; 0xbe <showSevenSegmentDisplayValue+0x1a>
		PORTD &= 0x80; //Limpa os 7 Ãºltimos bits da porta D
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	90 78       	andi	r25, 0x80	; 128
  ac:	9b b9       	out	0x0b, r25	; 11
		PORTD |= sevenSegmentCode[value];  // Define o valor a ser mostrado
  ae:	9b b1       	in	r25, 0x0b	; 11
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e0 50       	subi	r30, 0x00	; 0
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	89 2b       	or	r24, r25
  bc:	8b b9       	out	0x0b, r24	; 11
	}

	PORTB &= 0xF0;                         // Limpa PB0â€“PB3
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 7f       	andi	r24, 0xF0	; 240
  c2:	85 b9       	out	0x05, r24	; 5
	PORTB |= ((1 << displayAddress) & 0x0F); // Ativa o display desejado
  c4:	25 b1       	in	r18, 0x05	; 5
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <showSevenSegmentDisplayValue+0x2c>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <showSevenSegmentDisplayValue+0x28>
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	82 2b       	or	r24, r18
  d8:	85 b9       	out	0x05, r24	; 5
  da:	08 95       	ret

000000dc <cleanSevenSegmentDisplay>:
	
	return;
}

void cleanSevenSegmentDisplay(void) {
	PORTB &= 0xF0;  // Limpa PB0â€“PB3
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <showAllSevenSegmentDisplay>:
	
	return;
}

void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	08 2f       	mov	r16, r24
  ee:	16 2f       	mov	r17, r22
  f0:	d4 2f       	mov	r29, r20
  f2:	c2 2f       	mov	r28, r18
	
	cleanSevenSegmentDisplay();
  f4:	0e 94 6e 00 	call	0xdc	; 0xdc <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 2f       	mov	r24, r16
  fc:	0e 94 52 00 	call	0xa4	; 0xa4 <showSevenSegmentDisplayValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <showAllSevenSegmentDisplay+0x20>
 108:	00 c0       	rjmp	.+0      	; 0x10a <showAllSevenSegmentDisplay+0x26>
 10a:	00 00       	nop
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 10c:	0e 94 6e 00 	call	0xdc	; 0xdc <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	81 2f       	mov	r24, r17
 114:	0e 94 52 00 	call	0xa4	; 0xa4 <showSevenSegmentDisplayValue>
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9f e1       	ldi	r25, 0x1F	; 31
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <showAllSevenSegmentDisplay+0x38>
 120:	00 c0       	rjmp	.+0      	; 0x122 <showAllSevenSegmentDisplay+0x3e>
 122:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 124:	0e 94 6e 00 	call	0xdc	; 0xdc <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	8d 2f       	mov	r24, r29
 12c:	0e 94 52 00 	call	0xa4	; 0xa4 <showSevenSegmentDisplayValue>
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9f e1       	ldi	r25, 0x1F	; 31
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <showAllSevenSegmentDisplay+0x50>
 138:	00 c0       	rjmp	.+0      	; 0x13a <showAllSevenSegmentDisplay+0x56>
 13a:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 13c:	0e 94 6e 00 	call	0xdc	; 0xdc <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 52 00 	call	0xa4	; 0xa4 <showSevenSegmentDisplayValue>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9f e1       	ldi	r25, 0x1F	; 31
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <showAllSevenSegmentDisplay+0x68>
 150:	00 c0       	rjmp	.+0      	; 0x152 <showAllSevenSegmentDisplay+0x6e>
 152:	00 00       	nop
	_delay_ms(2);
	
	return;
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <main>:
// FUNÇÃO PRINCIPAL
// ========================

int main(void){
	uint16_t num0 = 0, num1 = 0;
	setupSevenSegmentDisplay();  // Inicializa os pinos do display de 7 segmentos
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <setupSevenSegmentDisplay>
// ========================
// FUNÇÃO PRINCIPAL
// ========================

int main(void){
	uint16_t num0 = 0, num1 = 0;
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	00 e0       	ldi	r16, 0x00	; 0
 168:	10 e0       	ldi	r17, 0x00	; 0
	setupSevenSegmentDisplay();  // Inicializa os pinos do display de 7 segmentos

	while(1){
		/**/
		showAllSevenSegmentDisplay((num1)%10, (num1+1)%10, (num1+2)%10, (num1+3)%10);
 16a:	af 01       	movw	r20, r30
 16c:	4d 5f       	subi	r20, 0xFD	; 253
 16e:	5f 4f       	sbci	r21, 0xFF	; 255
 170:	9a 01       	movw	r18, r20
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 17a:	7c 01       	movw	r14, r24
 17c:	f6 94       	lsr	r15
 17e:	e7 94       	ror	r14
 180:	f6 94       	lsr	r15
 182:	e7 94       	ror	r14
 184:	f6 94       	lsr	r15
 186:	e7 94       	ror	r14
 188:	c7 01       	movw	r24, r14
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	ee 0c       	add	r14, r14
 190:	ff 1c       	adc	r15, r15
 192:	ee 0c       	add	r14, r14
 194:	ff 1c       	adc	r15, r15
 196:	ee 0c       	add	r14, r14
 198:	ff 1c       	adc	r15, r15
 19a:	e8 0e       	add	r14, r24
 19c:	f9 1e       	adc	r15, r25
 19e:	ca 01       	movw	r24, r20
 1a0:	8e 19       	sub	r24, r14
 1a2:	9f 09       	sbc	r25, r15
 1a4:	7c 01       	movw	r14, r24
 1a6:	ef 01       	movw	r28, r30
 1a8:	22 96       	adiw	r28, 0x02	; 2
 1aa:	9e 01       	movw	r18, r28
 1ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 1b0:	ac 01       	movw	r20, r24
 1b2:	56 95       	lsr	r21
 1b4:	47 95       	ror	r20
 1b6:	56 95       	lsr	r21
 1b8:	47 95       	ror	r20
 1ba:	56 95       	lsr	r21
 1bc:	47 95       	ror	r20
 1be:	ca 01       	movw	r24, r20
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	48 0f       	add	r20, r24
 1d2:	59 1f       	adc	r21, r25
 1d4:	ce 01       	movw	r24, r28
 1d6:	84 1b       	sub	r24, r20
 1d8:	95 0b       	sbc	r25, r21
 1da:	ac 01       	movw	r20, r24
 1dc:	6f 01       	movw	r12, r30
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	c9 1a       	sub	r12, r25
 1e2:	d9 0a       	sbc	r13, r25
 1e4:	96 01       	movw	r18, r12
 1e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 1ea:	ec 01       	movw	r28, r24
 1ec:	d6 95       	lsr	r29
 1ee:	c7 95       	ror	r28
 1f0:	d6 95       	lsr	r29
 1f2:	c7 95       	ror	r28
 1f4:	d6 95       	lsr	r29
 1f6:	c7 95       	ror	r28
 1f8:	ce 01       	movw	r24, r28
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	cc 0f       	add	r28, r28
 200:	dd 1f       	adc	r29, r29
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	cc 0f       	add	r28, r28
 208:	dd 1f       	adc	r29, r29
 20a:	c8 0f       	add	r28, r24
 20c:	d9 1f       	adc	r29, r25
 20e:	c6 01       	movw	r24, r12
 210:	8c 1b       	sub	r24, r28
 212:	9d 0b       	sbc	r25, r29
 214:	ec 01       	movw	r28, r24
 216:	9f 01       	movw	r18, r30
 218:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	9c 01       	movw	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	82 0f       	add	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	2e 2d       	mov	r18, r14
 240:	6c 2f       	mov	r22, r28
 242:	3e 2f       	mov	r19, r30
 244:	38 1b       	sub	r19, r24
 246:	83 2f       	mov	r24, r19
 248:	0e 94 72 00 	call	0xe4	; 0xe4 <showAllSevenSegmentDisplay>
		
		num0++;
 24c:	0f 5f       	subi	r16, 0xFF	; 255
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
		num1 = (num0/100)%10;
 250:	98 01       	movw	r18, r16
 252:	36 95       	lsr	r19
 254:	27 95       	ror	r18
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	ab e7       	ldi	r26, 0x7B	; 123
 25c:	b4 e1       	ldi	r27, 0x14	; 20
 25e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 262:	ac 01       	movw	r20, r24
 264:	56 95       	lsr	r21
 266:	47 95       	ror	r20
 268:	9a 01       	movw	r18, r20
 26a:	ad ec       	ldi	r26, 0xCD	; 205
 26c:	bc ec       	ldi	r27, 0xCC	; 204
 26e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 272:	fc 01       	movw	r30, r24
 274:	f6 95       	lsr	r31
 276:	e7 95       	ror	r30
 278:	f6 95       	lsr	r31
 27a:	e7 95       	ror	r30
 27c:	f6 95       	lsr	r31
 27e:	e7 95       	ror	r30
 280:	cf 01       	movw	r24, r30
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	ca 01       	movw	r24, r20
 298:	8e 1b       	sub	r24, r30
 29a:	9f 0b       	sbc	r25, r31
 29c:	fc 01       	movw	r30, r24
 29e:	65 cf       	rjmp	.-310    	; 0x16a <main+0xc>

000002a0 <__umulhisi3>:
 2a0:	a2 9f       	mul	r26, r18
 2a2:	b0 01       	movw	r22, r0
 2a4:	b3 9f       	mul	r27, r19
 2a6:	c0 01       	movw	r24, r0
 2a8:	a3 9f       	mul	r26, r19
 2aa:	70 0d       	add	r23, r0
 2ac:	81 1d       	adc	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	91 1d       	adc	r25, r1
 2b2:	b2 9f       	mul	r27, r18
 2b4:	70 0d       	add	r23, r0
 2b6:	81 1d       	adc	r24, r1
 2b8:	11 24       	eor	r1, r1
 2ba:	91 1d       	adc	r25, r1
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
