
Example_Seven_Segment_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002b6  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e4  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000423  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e8  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  8e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setupSevenSegmentDisplay>:
	0x7F, 0x7B, 0x77, 0x1F,
	0x4E, 0x3D, 0x4F, 0x47
};

void setupSevenSegmentDisplay(void) {
	DDRC = 0xFF;   // PORTC como saÃ­da (segmentos)
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x0F;  // PB0â€“PB3 como saÃ­da (seleÃ§Ã£o dos dÃ­gitos)
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	8f 60       	ori	r24, 0x0F	; 15
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	08 95       	ret

000000a2 <showSevenSegmentDisplayValue>:
	
	return;
}

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
	if (value < 16) {
  a2:	80 31       	cpi	r24, 0x10	; 16
  a4:	30 f4       	brcc	.+12     	; 0xb2 <showSevenSegmentDisplayValue+0x10>
		PORTC = sevenSegmentCode[value];  // Define o valor a ser mostrado
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	e0 50       	subi	r30, 0x00	; 0
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	80 81       	ld	r24, Z
  b0:	88 b9       	out	0x08, r24	; 8
	}

	PORTB &= 0xF0;                         // Limpa PB0â€“PB3
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	85 b9       	out	0x05, r24	; 5
	PORTB |= ((1 << displayAddress) & 0x0F); // Ativa o display desejado
  b8:	25 b1       	in	r18, 0x05	; 5
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <showSevenSegmentDisplayValue+0x22>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <showSevenSegmentDisplayValue+0x1e>
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	82 2b       	or	r24, r18
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <cleanSevenSegmentDisplay>:
	
	return;
}

void cleanSevenSegmentDisplay(void) {
	PORTB &= 0xF0;  // Limpa PB0â€“PB3
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <showAllSevenSegmentDisplay>:
	
	return;
}

void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	08 2f       	mov	r16, r24
  e2:	16 2f       	mov	r17, r22
  e4:	d4 2f       	mov	r29, r20
  e6:	c2 2f       	mov	r28, r18
	
	cleanSevenSegmentDisplay();
  e8:	0e 94 68 00 	call	0xd0	; 0xd0 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 2f       	mov	r24, r16
  f0:	0e 94 51 00 	call	0xa2	; 0xa2 <showSevenSegmentDisplayValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9f e1       	ldi	r25, 0x1F	; 31
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <showAllSevenSegmentDisplay+0x20>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <showAllSevenSegmentDisplay+0x26>
  fe:	00 00       	nop
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 100:	0e 94 68 00 	call	0xd0	; 0xd0 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 2f       	mov	r24, r17
 108:	0e 94 51 00 	call	0xa2	; 0xa2 <showSevenSegmentDisplayValue>
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	9f e1       	ldi	r25, 0x1F	; 31
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <showAllSevenSegmentDisplay+0x38>
 114:	00 c0       	rjmp	.+0      	; 0x116 <showAllSevenSegmentDisplay+0x3e>
 116:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	8d 2f       	mov	r24, r29
 120:	0e 94 51 00 	call	0xa2	; 0xa2 <showSevenSegmentDisplayValue>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <showAllSevenSegmentDisplay+0x50>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <showAllSevenSegmentDisplay+0x56>
 12e:	00 00       	nop
	_delay_ms(2);
	
	cleanSevenSegmentDisplay();
 130:	0e 94 68 00 	call	0xd0	; 0xd0 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	8c 2f       	mov	r24, r28
 138:	0e 94 51 00 	call	0xa2	; 0xa2 <showSevenSegmentDisplayValue>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <showAllSevenSegmentDisplay+0x68>
 144:	00 c0       	rjmp	.+0      	; 0x146 <showAllSevenSegmentDisplay+0x6e>
 146:	00 00       	nop
	_delay_ms(2);
	
	return;
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <main>:
// FUNÇÃO PRINCIPAL
// ========================

int main(void){
	uint16_t num0 = 0, num1 = 0;
	setupSevenSegmentDisplay();  // Inicializa os pinos do display de 7 segmentos
 152:	0e 94 4b 00 	call	0x96	; 0x96 <setupSevenSegmentDisplay>
// ========================
// FUNÇÃO PRINCIPAL
// ========================

int main(void){
	uint16_t num0 = 0, num1 = 0;
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	10 e0       	ldi	r17, 0x00	; 0
	setupSevenSegmentDisplay();  // Inicializa os pinos do display de 7 segmentos

	while(1){
		/**/
		showAllSevenSegmentDisplay((num1)%10, (num1+1)%10, (num1+2)%10, (num1+3)%10);
 15e:	af 01       	movw	r20, r30
 160:	4d 5f       	subi	r20, 0xFD	; 253
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	9a 01       	movw	r18, r20
 166:	ad ec       	ldi	r26, 0xCD	; 205
 168:	bc ec       	ldi	r27, 0xCC	; 204
 16a:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 16e:	7c 01       	movw	r14, r24
 170:	f6 94       	lsr	r15
 172:	e7 94       	ror	r14
 174:	f6 94       	lsr	r15
 176:	e7 94       	ror	r14
 178:	f6 94       	lsr	r15
 17a:	e7 94       	ror	r14
 17c:	c7 01       	movw	r24, r14
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	ee 0c       	add	r14, r14
 184:	ff 1c       	adc	r15, r15
 186:	ee 0c       	add	r14, r14
 188:	ff 1c       	adc	r15, r15
 18a:	ee 0c       	add	r14, r14
 18c:	ff 1c       	adc	r15, r15
 18e:	e8 0e       	add	r14, r24
 190:	f9 1e       	adc	r15, r25
 192:	ca 01       	movw	r24, r20
 194:	8e 19       	sub	r24, r14
 196:	9f 09       	sbc	r25, r15
 198:	7c 01       	movw	r14, r24
 19a:	ef 01       	movw	r28, r30
 19c:	22 96       	adiw	r28, 0x02	; 2
 19e:	9e 01       	movw	r18, r28
 1a0:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 1a4:	ac 01       	movw	r20, r24
 1a6:	56 95       	lsr	r21
 1a8:	47 95       	ror	r20
 1aa:	56 95       	lsr	r21
 1ac:	47 95       	ror	r20
 1ae:	56 95       	lsr	r21
 1b0:	47 95       	ror	r20
 1b2:	ca 01       	movw	r24, r20
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	48 0f       	add	r20, r24
 1c6:	59 1f       	adc	r21, r25
 1c8:	ce 01       	movw	r24, r28
 1ca:	84 1b       	sub	r24, r20
 1cc:	95 0b       	sbc	r25, r21
 1ce:	ac 01       	movw	r20, r24
 1d0:	6f 01       	movw	r12, r30
 1d2:	9f ef       	ldi	r25, 0xFF	; 255
 1d4:	c9 1a       	sub	r12, r25
 1d6:	d9 0a       	sbc	r13, r25
 1d8:	96 01       	movw	r18, r12
 1da:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 1de:	ec 01       	movw	r28, r24
 1e0:	d6 95       	lsr	r29
 1e2:	c7 95       	ror	r28
 1e4:	d6 95       	lsr	r29
 1e6:	c7 95       	ror	r28
 1e8:	d6 95       	lsr	r29
 1ea:	c7 95       	ror	r28
 1ec:	ce 01       	movw	r24, r28
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	cc 0f       	add	r28, r28
 1f4:	dd 1f       	adc	r29, r29
 1f6:	cc 0f       	add	r28, r28
 1f8:	dd 1f       	adc	r29, r29
 1fa:	cc 0f       	add	r28, r28
 1fc:	dd 1f       	adc	r29, r29
 1fe:	c8 0f       	add	r28, r24
 200:	d9 1f       	adc	r29, r25
 202:	c6 01       	movw	r24, r12
 204:	8c 1b       	sub	r24, r28
 206:	9d 0b       	sbc	r25, r29
 208:	ec 01       	movw	r28, r24
 20a:	9f 01       	movw	r18, r30
 20c:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	9c 01       	movw	r18, r24
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	82 0f       	add	r24, r18
 230:	93 1f       	adc	r25, r19
 232:	2e 2d       	mov	r18, r14
 234:	6c 2f       	mov	r22, r28
 236:	3e 2f       	mov	r19, r30
 238:	38 1b       	sub	r19, r24
 23a:	83 2f       	mov	r24, r19
 23c:	0e 94 6c 00 	call	0xd8	; 0xd8 <showAllSevenSegmentDisplay>
		
		num0++;
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
		num1 = (num0/100)%10;
 244:	98 01       	movw	r18, r16
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	ab e7       	ldi	r26, 0x7B	; 123
 250:	b4 e1       	ldi	r27, 0x14	; 20
 252:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 256:	ac 01       	movw	r20, r24
 258:	56 95       	lsr	r21
 25a:	47 95       	ror	r20
 25c:	9a 01       	movw	r18, r20
 25e:	ad ec       	ldi	r26, 0xCD	; 205
 260:	bc ec       	ldi	r27, 0xCC	; 204
 262:	0e 94 4a 01 	call	0x294	; 0x294 <__umulhisi3>
 266:	fc 01       	movw	r30, r24
 268:	f6 95       	lsr	r31
 26a:	e7 95       	ror	r30
 26c:	f6 95       	lsr	r31
 26e:	e7 95       	ror	r30
 270:	f6 95       	lsr	r31
 272:	e7 95       	ror	r30
 274:	cf 01       	movw	r24, r30
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	e8 0f       	add	r30, r24
 288:	f9 1f       	adc	r31, r25
 28a:	ca 01       	movw	r24, r20
 28c:	8e 1b       	sub	r24, r30
 28e:	9f 0b       	sbc	r25, r31
 290:	fc 01       	movw	r30, r24
 292:	65 cf       	rjmp	.-310    	; 0x15e <main+0xc>

00000294 <__umulhisi3>:
 294:	a2 9f       	mul	r26, r18
 296:	b0 01       	movw	r22, r0
 298:	b3 9f       	mul	r27, r19
 29a:	c0 01       	movw	r24, r0
 29c:	a3 9f       	mul	r26, r19
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	b2 9f       	mul	r27, r18
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
