
Four_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000036c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078c  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000518  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006daa  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00008626  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00008780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000028aa  00000000  00000000  000087b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  8e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setupSevenSegmentDisplay>:
#include <avr/io.h>
#include <util/delay.h>

#include "../Seven_Segment_Display_Lib/seven_segment_display.h"

void setupSevenSegmentDisplay() {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF;   // PORTC como saída (segmentos)
  9e:	87 e2       	ldi	r24, 0x27	; 39
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	DDRB |= 0x0F;  // PB0–PB3 como saída (seleção dos dígitos)
  a8:	84 e2       	ldi	r24, 0x24	; 36
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	24 e2       	ldi	r18, 0x24	; 36
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	f9 01       	movw	r30, r18
  b2:	20 81       	ld	r18, Z
  b4:	2f 60       	ori	r18, 0x0F	; 15
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	
	return;
  ba:	00 00       	nop
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <showSevenSegmentDisplayValue>:

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAdress){
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	62 97       	sbiw	r28, 0x12	; 18
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	89 8b       	std	Y+17, r24	; 0x11
  d8:	6a 8b       	std	Y+18, r22	; 0x12
	const uint8_t sevenSegmentCode[16] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B, 0x77, 0x1F, 0x4E, 0x3D, 0x4F, 0x47};  // Segmentos para 0–F
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	dc 01       	movw	r26, r24
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	2a 95       	dec	r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <showSevenSegmentDisplayValue+0x24>
		
	if (value < 16) {
  ee:	89 89       	ldd	r24, Y+17	; 0x11
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	70 f4       	brcc	.+28     	; 0x110 <showSevenSegmentDisplayValue+0x4e>
		PORTC = sevenSegmentCode[value]; // Define o valor a ser mostrado
  f4:	88 e2       	ldi	r24, 0x28	; 40
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	29 89       	ldd	r18, Y+17	; 0x11
  fa:	22 2f       	mov	r18, r18
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	ae 01       	movw	r20, r28
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	24 0f       	add	r18, r20
 106:	35 1f       	adc	r19, r21
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	}
	
	//Mostra o valor
	PORTB &= 0xF0;  // Limpa PB0–PB3
 110:	85 e2       	ldi	r24, 0x25	; 37
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	25 e2       	ldi	r18, 0x25	; 37
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	20 7f       	andi	r18, 0xF0	; 240
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	PORTB |= ((1 << displayAdress) & 0x0F);  // Ativa o display desejado
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	25 e2       	ldi	r18, 0x25	; 37
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	62 2f       	mov	r22, r18
 130:	2a 89       	ldd	r18, Y+18	; 0x12
 132:	42 2f       	mov	r20, r18
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <showSevenSegmentDisplayValue+0x7e>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	4a 95       	dec	r20
 142:	e2 f7       	brpl	.-8      	; 0x13c <showSevenSegmentDisplayValue+0x7a>
 144:	2f 70       	andi	r18, 0x0F	; 15
 146:	26 2b       	or	r18, r22
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	
	return;
 14c:	00 00       	nop
}
 14e:	62 96       	adiw	r28, 0x12	; 18
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <cleanSevenSegmentDisplay>:

void cleanSevenSegmentDisplay() {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	PORTB &= 0xF0;  // Limpa PB0–PB3
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	25 e2       	ldi	r18, 0x25	; 37
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	20 7f       	andi	r18, 0xF0	; 240
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	
	return;
 17a:	00 00       	nop
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <showAllSevenSegmentDisplay>:

void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	00 d0       	rcall	.+0      	; 0x188 <showAllSevenSegmentDisplay+0x6>
 188:	00 d0       	rcall	.+0      	; 0x18a <showAllSevenSegmentDisplay+0x8>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	6a 83       	std	Y+2, r22	; 0x02
 192:	4b 83       	std	Y+3, r20	; 0x03
 194:	2c 83       	std	Y+4, r18	; 0x04
	
	cleanSevenSegmentDisplay();
 196:	0e 94 b0 00 	call	0x160	; 0x160 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	0e 94 61 00 	call	0xc2	; 0xc2 <showSevenSegmentDisplayValue>
		
	cleanSevenSegmentDisplay();
 1a2:	0e 94 b0 00 	call	0x160	; 0x160 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <showSevenSegmentDisplayValue>
		
	cleanSevenSegmentDisplay();
 1ae:	0e 94 b0 00 	call	0x160	; 0x160 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	0e 94 61 00 	call	0xc2	; 0xc2 <showSevenSegmentDisplayValue>
		
	cleanSevenSegmentDisplay();
 1ba:	0e 94 b0 00 	call	0x160	; 0x160 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	0e 94 61 00 	call	0xc2	; 0xc2 <showSevenSegmentDisplayValue>
	
	return;
 1c6:	00 00       	nop
}
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <main>:

// ========================
// FUNÇÃO PRINCIPAL
// ========================

int main(void){
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x8>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0xa>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	uint16_t num0 = 0, num1 = 0;
 1e4:	1a 82       	std	Y+2, r1	; 0x02
 1e6:	19 82       	std	Y+1, r1	; 0x01
 1e8:	1c 82       	std	Y+4, r1	; 0x04
 1ea:	1b 82       	std	Y+3, r1	; 0x03
	setupSevenSegmentDisplay();  // Inicializa os pinos do display de 7 segmentos
 1ec:	0e 94 4b 00 	call	0x96	; 0x96 <setupSevenSegmentDisplay>

	while(1){
		/**/
		showAllSevenSegmentDisplay((num1)%10, (num1+1)%10, (num1+2)%10, (num1+3)%10);
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	ac 01       	movw	r20, r24
 1f6:	4d 5f       	subi	r20, 0xFD	; 253
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	9a 01       	movw	r18, r20
 1fc:	ad ec       	ldi	r26, 0xCD	; 205
 1fe:	bc ec       	ldi	r27, 0xCC	; 204
 200:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	9c 01       	movw	r18, r24
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	82 0f       	add	r24, r18
 220:	93 1f       	adc	r25, r19
 222:	9a 01       	movw	r18, r20
 224:	28 1b       	sub	r18, r24
 226:	39 0b       	sbc	r19, r25
 228:	c9 01       	movw	r24, r18
 22a:	18 2f       	mov	r17, r24
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	ac 01       	movw	r20, r24
 232:	4e 5f       	subi	r20, 0xFE	; 254
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	9a 01       	movw	r18, r20
 238:	ad ec       	ldi	r26, 0xCD	; 205
 23a:	bc ec       	ldi	r27, 0xCC	; 204
 23c:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	9c 01       	movw	r18, r24
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	9a 01       	movw	r18, r20
 260:	28 1b       	sub	r18, r24
 262:	39 0b       	sbc	r19, r25
 264:	c9 01       	movw	r24, r18
 266:	f8 2f       	mov	r31, r24
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	9c 81       	ldd	r25, Y+4	; 0x04
 26c:	ac 01       	movw	r20, r24
 26e:	4f 5f       	subi	r20, 0xFF	; 255
 270:	5f 4f       	sbci	r21, 0xFF	; 255
 272:	9a 01       	movw	r18, r20
 274:	ad ec       	ldi	r26, 0xCD	; 205
 276:	bc ec       	ldi	r27, 0xCC	; 204
 278:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	9c 01       	movw	r18, r24
 28e:	22 0f       	add	r18, r18
 290:	33 1f       	adc	r19, r19
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	9a 01       	movw	r18, r20
 29c:	28 1b       	sub	r18, r24
 29e:	39 0b       	sbc	r19, r25
 2a0:	c9 01       	movw	r24, r18
 2a2:	e8 2f       	mov	r30, r24
 2a4:	4b 81       	ldd	r20, Y+3	; 0x03
 2a6:	5c 81       	ldd	r21, Y+4	; 0x04
 2a8:	9a 01       	movw	r18, r20
 2aa:	ad ec       	ldi	r26, 0xCD	; 205
 2ac:	bc ec       	ldi	r27, 0xCC	; 204
 2ae:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	9c 01       	movw	r18, r24
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	9a 01       	movw	r18, r20
 2d2:	28 1b       	sub	r18, r24
 2d4:	39 0b       	sbc	r19, r25
 2d6:	c9 01       	movw	r24, r18
 2d8:	21 2f       	mov	r18, r17
 2da:	4f 2f       	mov	r20, r31
 2dc:	6e 2f       	mov	r22, r30
 2de:	0e 94 c1 00 	call	0x182	; 0x182 <showAllSevenSegmentDisplay>
		
		num0++;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	9a 83       	std	Y+2, r25	; 0x02
 2ea:	89 83       	std	Y+1, r24	; 0x01
		num1 = (num0/1000)%10;
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	9c 01       	movw	r18, r24
 2fe:	a5 ec       	ldi	r26, 0xC5	; 197
 300:	b0 e2       	ldi	r27, 0x20	; 32
 302:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 306:	ac 01       	movw	r20, r24
 308:	52 95       	swap	r21
 30a:	42 95       	swap	r20
 30c:	4f 70       	andi	r20, 0x0F	; 15
 30e:	45 27       	eor	r20, r21
 310:	5f 70       	andi	r21, 0x0F	; 15
 312:	45 27       	eor	r20, r21
 314:	9a 01       	movw	r18, r20
 316:	ad ec       	ldi	r26, 0xCD	; 205
 318:	bc ec       	ldi	r27, 0xCC	; 204
 31a:	0e 94 a5 01 	call	0x34a	; 0x34a <__umulhisi3>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	9c 01       	movw	r18, r24
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	82 0f       	add	r24, r18
 33a:	93 1f       	adc	r25, r19
 33c:	9a 01       	movw	r18, r20
 33e:	28 1b       	sub	r18, r24
 340:	39 0b       	sbc	r19, r25
 342:	c9 01       	movw	r24, r18
 344:	9c 83       	std	Y+4, r25	; 0x04
 346:	8b 83       	std	Y+3, r24	; 0x03
		
		//showAllSevenSegmentDisplay(0xC, 0xA, 0xF, 0xE);

	}
 348:	53 cf       	rjmp	.-346    	; 0x1f0 <main+0x1a>

0000034a <__umulhisi3>:
 34a:	a2 9f       	mul	r26, r18
 34c:	b0 01       	movw	r22, r0
 34e:	b3 9f       	mul	r27, r19
 350:	c0 01       	movw	r24, r0
 352:	a3 9f       	mul	r26, r19
 354:	70 0d       	add	r23, r0
 356:	81 1d       	adc	r24, r1
 358:	11 24       	eor	r1, r1
 35a:	91 1d       	adc	r25, r1
 35c:	b2 9f       	mul	r27, r18
 35e:	70 0d       	add	r23, r0
 360:	81 1d       	adc	r24, r1
 362:	11 24       	eor	r1, r1
 364:	91 1d       	adc	r25, r1
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
