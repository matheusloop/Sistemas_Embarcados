
DemoRetrofit_8bits_ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800110  00800110  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc4  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a85  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000907  00000000  00000000  0000227d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f4  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053f  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_9>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 02 	call	0x456	; 0x456 <main>
  9e:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
}

uint16_t getTemperatureSensorLevel(void){
	// Retorna o valor bruto do ADC armazenado (nível analógico do sensor)
	return TemperatureSensorLevel;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  bc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <TemperatureSensorLevel+0x1>
  c0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <TemperatureSensorLevel>
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_10>:
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  f4:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  f8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <ultima_captura>
 100:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <ultima_captura+0x1>
 104:	a9 01       	movw	r20, r18
 106:	48 1b       	sub	r20, r24
 108:	59 0b       	sbc	r21, r25
 10a:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <ultima_captura+0x1>
 10e:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <ultima_captura>
 112:	ca 01       	movw	r24, r20
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	aa 1f       	adc	r26, r26
 11e:	bb 1f       	adc	r27, r27
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	ac 01       	movw	r20, r24
 13a:	bd 01       	movw	r22, r26
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	66 1f       	adc	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	66 1f       	adc	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	66 1f       	adc	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	9a 01       	movw	r18, r20
 156:	ab 01       	movw	r20, r22
 158:	28 1b       	sub	r18, r24
 15a:	39 0b       	sbc	r19, r25
 15c:	4a 0b       	sbc	r20, r26
 15e:	5b 0b       	sbc	r21, r27
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	77 e8       	ldi	r23, 0x87	; 135
 164:	83 e9       	ldi	r24, 0x93	; 147
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodsi4>
 16c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
 170:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 174:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__data_end+0x2>
 178:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__data_end+0x3>
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <setupHeatingCoolingSystem>:
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	80 66       	ori	r24, 0x60	; 96
 1a2:	8a b9       	out	0x0a, r24	; 10
 1a4:	84 b5       	in	r24, 0x24	; 36
 1a6:	83 6a       	ori	r24, 0xA3	; 163
 1a8:	84 bd       	out	0x24, r24	; 36
 1aa:	85 b5       	in	r24, 0x25	; 37
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	85 bd       	out	0x25, r24	; 37
 1b0:	17 bc       	out	0x27, r1	; 39
 1b2:	18 bc       	out	0x28, r1	; 40
 1b4:	87 b1       	in	r24, 0x07	; 7
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	87 b9       	out	0x07, r24	; 7
 1ba:	88 b1       	in	r24, 0x08	; 8
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	85 e4       	ldi	r24, 0x45	; 69
 1c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1c6:	8f ee       	ldi	r24, 0xEF	; 239
 1c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1cc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 1d0:	ee e7       	ldi	r30, 0x7E	; 126
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	80 83       	st	Z, r24
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	84 b9       	out	0x04, r24	; 4
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	84 e4       	ldi	r24, 0x44	; 68
 1e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 1f2:	78 94       	sei
 1f4:	08 95       	ret

000001f6 <setHeaterDutyCycle>:
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	82 9f       	mul	r24, r18
 1fa:	c0 01       	movw	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	9c 01       	movw	r18, r24
 200:	36 95       	lsr	r19
 202:	27 95       	ror	r18
 204:	36 95       	lsr	r19
 206:	27 95       	ror	r18
 208:	ab e7       	ldi	r26, 0x7B	; 123
 20a:	b4 e1       	ldi	r27, 0x14	; 20
 20c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__umulhisi3>
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	88 bd       	out	0x28, r24	; 40
 216:	08 95       	ret

00000218 <setCoolerDutyCycle>:
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	82 9f       	mul	r24, r18
 21c:	c0 01       	movw	r24, r0
 21e:	11 24       	eor	r1, r1
 220:	9c 01       	movw	r18, r24
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	ab e7       	ldi	r26, 0x7B	; 123
 22c:	b4 e1       	ldi	r27, 0x14	; 20
 22e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__umulhisi3>
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	87 bd       	out	0x27, r24	; 39
 238:	08 95       	ret

0000023a <getTemperatureDegrees>:

uint16_t getTemperatureDegrees(void){
	// Converte o valor do ADC em graus Celsius com base em ajuste empírico
	// Fórmula aproximada: Temperatura (°C) = (ADC - 120) / 8
	return (TemperatureSensorLevel - 120) / 8;
 23a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TemperatureSensorLevel>
 23e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <TemperatureSensorLevel+0x1>
 242:	88 57       	subi	r24, 0x78	; 120
 244:	91 09       	sbc	r25, r1
}
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	08 95       	ret

00000254 <getTachometerVelValue>:

// Retorna a última velocidade medida em RPM
uint32_t getTachometerVelValue(void){
	return velRPM;
 254:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 258:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 25c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 260:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
}
 264:	08 95       	ret

00000266 <setupSevenSegmentDisplay>:
static uint8_t actualDisplay = 0;
static uint8_t displaysValues[4] = {0, 0, 0, 0};

void setupSevenSegmentDisplay(void) {
	// Define os pinos PC0âPC3 como saÃ­da para os segmentos A, B, C e D
	DDRC |= (1<<DDC0) | (1<<DDC1) | (1<<DDC2) | (1<<DDC3);
 266:	87 b1       	in	r24, 0x07	; 7
 268:	8f 60       	ori	r24, 0x0F	; 15
 26a:	87 b9       	out	0x07, r24	; 7
	
	// Define os pinos PB1âPB3 como saÃ­da para os segmentos E, F e G
	DDRB |= (1<<DDB1) | (1<<DDB2) | (1<<DDB3);
 26c:	84 b1       	in	r24, 0x04	; 4
 26e:	8e 60       	ori	r24, 0x0E	; 14
 270:	84 b9       	out	0x04, r24	; 4
	
	// Define os pinos PD2, PD3, PD4 e PD7 como saÃ­da para habilitaÃ§Ã£o dos displays (EN0 a EN3)
	DDRD |= (1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD7);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	8c 69       	ori	r24, 0x9C	; 156
 276:	8a b9       	out	0x0a, r24	; 10
 278:	08 95       	ret

0000027a <activeSegments>:
}

void activeSegments(uint8_t segmentCode) {
	// Ativa os segmentos com base no valor binÃ¡rio fornecido
	if (segmentCode & (1<<6)) PORTC |= (1<<PORTC0); // Segmento A
 27a:	86 ff       	sbrs	r24, 6
 27c:	03 c0       	rjmp	.+6      	; 0x284 <activeSegments+0xa>
 27e:	98 b1       	in	r25, 0x08	; 8
 280:	91 60       	ori	r25, 0x01	; 1
 282:	98 b9       	out	0x08, r25	; 8
	if (segmentCode & (1<<5)) PORTC |= (1<<PORTC1); // Segmento B
 284:	85 ff       	sbrs	r24, 5
 286:	03 c0       	rjmp	.+6      	; 0x28e <activeSegments+0x14>
 288:	98 b1       	in	r25, 0x08	; 8
 28a:	92 60       	ori	r25, 0x02	; 2
 28c:	98 b9       	out	0x08, r25	; 8
	if (segmentCode & (1<<4)) PORTC |= (1<<PORTC2); // Segmento C
 28e:	84 ff       	sbrs	r24, 4
 290:	03 c0       	rjmp	.+6      	; 0x298 <activeSegments+0x1e>
 292:	98 b1       	in	r25, 0x08	; 8
 294:	94 60       	ori	r25, 0x04	; 4
 296:	98 b9       	out	0x08, r25	; 8
	if (segmentCode & (1<<3)) PORTC |= (1<<PORTC3); // Segmento D
 298:	83 ff       	sbrs	r24, 3
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <activeSegments+0x28>
 29c:	98 b1       	in	r25, 0x08	; 8
 29e:	98 60       	ori	r25, 0x08	; 8
 2a0:	98 b9       	out	0x08, r25	; 8
	if (segmentCode & (1<<2)) PORTB |= (1<<PORTB1); // Segmento E
 2a2:	82 ff       	sbrs	r24, 2
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <activeSegments+0x32>
 2a6:	95 b1       	in	r25, 0x05	; 5
 2a8:	92 60       	ori	r25, 0x02	; 2
 2aa:	95 b9       	out	0x05, r25	; 5
	if (segmentCode & (1<<1)) PORTB |= (1<<PORTB2); // Segmento F
 2ac:	81 ff       	sbrs	r24, 1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <activeSegments+0x3c>
 2b0:	95 b1       	in	r25, 0x05	; 5
 2b2:	94 60       	ori	r25, 0x04	; 4
 2b4:	95 b9       	out	0x05, r25	; 5
	if (segmentCode & (1<<0)) PORTB |= (1<<PORTB3); // Segmento G
 2b6:	80 ff       	sbrs	r24, 0
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <activeSegments+0x46>
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	85 b9       	out	0x05, r24	; 5
 2c0:	08 95       	ret

000002c2 <cleanSevenSegmentDisplay>:
}

void cleanSevenSegmentDisplay(void) {
	// Desliga todos os segmentos
	PORTC &= ~((1<<PORTC0) | (1<<PORTC1) | (1<<PORTC2) | (1<<PORTC3)); // Segmentos AâD
 2c2:	88 b1       	in	r24, 0x08	; 8
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~((1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3));               // Segmentos EâG
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	81 7f       	andi	r24, 0xF1	; 241
 2cc:	85 b9       	out	0x05, r24	; 5
	
	// Desabilita todos os displays
	PORTD &= ~((1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD7));
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	83 76       	andi	r24, 0x63	; 99
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	08 95       	ret

000002d6 <showSevenSegmentDisplayValue>:
}

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	d8 2f       	mov	r29, r24
 2dc:	c6 2f       	mov	r28, r22
	// Limpa todos os segmentos e displays antes de exibir novo valor
	cleanSevenSegmentDisplay();
 2de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <cleanSevenSegmentDisplay>

	// Ativa os segmentos correspondentes ao valor (0âF)
	if (value < 16) {
 2e2:	d0 31       	cpi	r29, 0x10	; 16
 2e4:	38 f4       	brcc	.+14     	; 0x2f4 <showSevenSegmentDisplayValue+0x1e>
		activeSegments(sevenSegmentCode[value]);
 2e6:	ed 2f       	mov	r30, r29
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	80 81       	ld	r24, Z
 2f0:	0e 94 3d 01 	call	0x27a	; 0x27a <activeSegments>
	}

	// Habilita o display correspondente ao endereÃ§o fornecido
	switch(displayAddress){
 2f4:	c1 30       	cpi	r28, 0x01	; 1
 2f6:	51 f0       	breq	.+20     	; 0x30c <showSevenSegmentDisplayValue+0x36>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <showSevenSegmentDisplayValue+0x2e>
 2fa:	c2 30       	cpi	r28, 0x02	; 2
 2fc:	59 f0       	breq	.+22     	; 0x314 <showSevenSegmentDisplayValue+0x3e>
 2fe:	c3 30       	cpi	r28, 0x03	; 3
 300:	69 f0       	breq	.+26     	; 0x31c <showSevenSegmentDisplayValue+0x46>
 302:	0f c0       	rjmp	.+30     	; 0x322 <showSevenSegmentDisplayValue+0x4c>
		case 0:
			PORTD |= (1<<PORTD2); // Habilita display 0
 304:	8b b1       	in	r24, 0x0b	; 11
 306:	84 60       	ori	r24, 0x04	; 4
 308:	8b b9       	out	0x0b, r24	; 11
			break;
 30a:	0b c0       	rjmp	.+22     	; 0x322 <showSevenSegmentDisplayValue+0x4c>
		case 1:
			PORTD |= (1<<PORTD3); // Habilita display 1
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	8b b9       	out	0x0b, r24	; 11
			break;
 312:	07 c0       	rjmp	.+14     	; 0x322 <showSevenSegmentDisplayValue+0x4c>
		case 2:
			PORTD |= (1<<PORTD4); // Habilita display 2
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	80 61       	ori	r24, 0x10	; 16
 318:	8b b9       	out	0x0b, r24	; 11
			break;
 31a:	03 c0       	rjmp	.+6      	; 0x322 <showSevenSegmentDisplayValue+0x4c>
		case 3:
			PORTD |= (1<<PORTD7); // Habilita display 3
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8b b9       	out	0x0b, r24	; 11
			break;
		default:
			break; // EndereÃ§o invÃ¡lido: nenhum display Ã© habilitado
	}
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <__vector_9>:

// Rotina de interrupÃ§Ã£o do Timer2 â MultiplexaÃ§Ã£o dos displays
ISR(TIMER2_OVF_vect) {
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	// Exibe o valor correspondente ao display atual
	showSevenSegmentDisplayValue(displaysValues[actualDisplay], actualDisplay);
 34a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <actualDisplay>
 34e:	e6 2f       	mov	r30, r22
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e8 5e       	subi	r30, 0xE8	; 232
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	80 81       	ld	r24, Z
 358:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <showSevenSegmentDisplayValue>
	
	// AvanÃ§a para o prÃ³ximo display (multiplexaÃ§Ã£o cÃ­clica)
	actualDisplay = (actualDisplay + 1) % 4;
 35c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <actualDisplay>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	83 70       	andi	r24, 0x03	; 3
 366:	90 78       	andi	r25, 0x80	; 128
 368:	99 23       	and	r25, r25
 36a:	24 f4       	brge	.+8      	; 0x374 <__vector_9+0x4c>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	8c 6f       	ori	r24, 0xFC	; 252
 370:	9f 6f       	ori	r25, 0xFF	; 255
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <actualDisplay>
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <showAllSevenSegmentDisplay>:

void showAllSevenSegmentDisplay(void) {
	// Configura o Timer2 para modo normal e prescaler de 256 (~4ms entre overflows)
	TCCR2A = 0x00;						//Modo de operaÃ§Ã£o normal
 39a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B |= (1<<CS22);                // Prescaler = 256
 39e:	e1 eb       	ldi	r30, 0xB1	; 177
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);               // Habilita interrupÃ§Ã£o por overflow do Timer2
 3a8:	e0 e7       	ldi	r30, 0x70	; 112
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
	sei();                              // Habilita interrupÃ§Ãµes globais
 3b2:	78 94       	sei
 3b4:	08 95       	ret

000003b6 <setAllSevenSegmentDisplayValues>:
}

void setAllSevenSegmentDisplayValues(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
	// Define os valores a serem exibidos em cada display (0â3)
	displaysValues[0] = valueDisp_0;
 3b6:	e8 e1       	ldi	r30, 0x18	; 24
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	80 83       	st	Z, r24
	displaysValues[1] = valueDisp_1;
 3bc:	61 83       	std	Z+1, r22	; 0x01
	displaysValues[2] = valueDisp_2;
 3be:	42 83       	std	Z+2, r20	; 0x02
	displaysValues[3] = valueDisp_3;
 3c0:	23 83       	std	Z+3, r18	; 0x03
 3c2:	08 95       	ret

000003c4 <setupUART>:

// Recebe um byte (8 bits) pela UART (modo bloqueante)
uint8_t receiveUART(void) {
	while (!(UCSR0A & (1 << RXC0)));    // Aguarda até que um dado seja recebido
	return UDR0;                        // Retorna o dado recebido
}
 3c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3c8:	87 e6       	ldi	r24, 0x67	; 103
 3ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3ce:	88 e1       	ldi	r24, 0x18	; 24
 3d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3da:	08 95       	ret

000003dc <transmitUART_8bits>:
 3dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3e0:	95 ff       	sbrs	r25, 5
 3e2:	fc cf       	rjmp	.-8      	; 0x3dc <transmitUART_8bits>
 3e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3e8:	08 95       	ret

000003ea <transmitUART_16bits>:
 3ea:	cf 93       	push	r28
 3ec:	c8 2f       	mov	r28, r24
 3ee:	89 2f       	mov	r24, r25
 3f0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <transmitUART_8bits>
 3f4:	8c 2f       	mov	r24, r28
 3f6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <transmitUART_8bits>
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <sendASCIIFromInt>:

// Envia um número inteiro sem sinal (uint16_t) como caracteres ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	00 d0       	rcall	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 d0       	rcall	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 d0       	rcall	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__utoa_ncheck>
	char buffer[6];                         // Buffer para armazenar a representação em ASCII (até 5 dígitos + nulo)
	utoa(num, buffer, 10);                  // Converte o número para string decimal
	for (char *p = buffer; *p; p++) {
 41c:	8e 01       	movw	r16, r28
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	0a c0       	rjmp	.+20     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		transmitUART_8bits(*p);             // Envia cada caractere da string
 424:	0e 94 ee 01 	call	0x3dc	; 0x3dc <transmitUART_8bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e3       	ldi	r24, 0x3F	; 63
 42a:	9f e1       	ldi	r25, 0x1F	; 31
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop

// Envia um número inteiro sem sinal (uint16_t) como caracteres ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
	char buffer[6];                         // Buffer para armazenar a representação em ASCII (até 5 dígitos + nulo)
	utoa(num, buffer, 10);                  // Converte o número para string decimal
	for (char *p = buffer; *p; p++) {
 434:	0f 5f       	subi	r16, 0xFF	; 255
 436:	1f 4f       	sbci	r17, 0xFF	; 255
 438:	f8 01       	movw	r30, r16
 43a:	80 81       	ld	r24, Z
 43c:	81 11       	cpse	r24, r1
 43e:	f2 cf       	rjmp	.-28     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		transmitUART_8bits(*p);             // Envia cada caractere da string
		_delay_ms(2);                       // Pequeno atraso entre caracteres (evita sobrecarga em alguns receptores)
	}
}
 440:	26 96       	adiw	r28, 0x06	; 6
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <main>:
#include "../libs/heating_cooling_system.h"
#include "../libs/UART_Lib.h"

int main(void){
	uint16_t velResf = 0, temp = 0;
	setupUART();
 456:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <setupUART>
	
	setupSevenSegmentDisplay();
 45a:	0e 94 33 01 	call	0x266	; 0x266 <setupSevenSegmentDisplay>
	showAllSevenSegmentDisplay();
 45e:	0e 94 cd 01 	call	0x39a	; 0x39a <showAllSevenSegmentDisplay>
	
	setupHeatingCoolingSystem();
 462:	0e 94 cf 00 	call	0x19e	; 0x19e <setupHeatingCoolingSystem>
	setCoolerDutyCycle(50);
 466:	82 e3       	ldi	r24, 0x32	; 50
 468:	0e 94 0c 01 	call	0x218	; 0x218 <setCoolerDutyCycle>
	
    while (1) {
		velResf = getTachometerVelValue();
 46c:	0e 94 2a 01 	call	0x254	; 0x254 <getTachometerVelValue>
 470:	6b 01       	movw	r12, r22
 472:	7c 01       	movw	r14, r24
		temp = getTemperatureDegrees();
 474:	0e 94 1d 01 	call	0x23a	; 0x23a <getTemperatureDegrees>
 478:	ec 01       	movw	r28, r24

		setAllSevenSegmentDisplayValues((temp/10)%10, temp%10, 0xFF, 0xC);
 47a:	9c 01       	movw	r18, r24
 47c:	ad ec       	ldi	r26, 0xCD	; 205
 47e:	bc ec       	ldi	r27, 0xCC	; 204
 480:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__umulhisi3>
 484:	fc 01       	movw	r30, r24
 486:	f6 95       	lsr	r31
 488:	e7 95       	ror	r30
 48a:	f6 95       	lsr	r31
 48c:	e7 95       	ror	r30
 48e:	f6 95       	lsr	r31
 490:	e7 95       	ror	r30
 492:	cf 01       	movw	r24, r30
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	e8 0f       	add	r30, r24
 4a6:	f9 1f       	adc	r31, r25
 4a8:	2e 1b       	sub	r18, r30
 4aa:	3f 0b       	sbc	r19, r31
 4ac:	f9 01       	movw	r30, r18
 4ae:	9e 01       	movw	r18, r28
 4b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__umulhisi3>
 4b4:	8c 01       	movw	r16, r24
 4b6:	16 95       	lsr	r17
 4b8:	07 95       	ror	r16
 4ba:	16 95       	lsr	r17
 4bc:	07 95       	ror	r16
 4be:	16 95       	lsr	r17
 4c0:	07 95       	ror	r16
 4c2:	98 01       	movw	r18, r16
 4c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__umulhisi3>
 4c8:	96 95       	lsr	r25
 4ca:	87 95       	ror	r24
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	9c 01       	movw	r18, r24
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	82 0f       	add	r24, r18
 4e8:	93 1f       	adc	r25, r19
 4ea:	2c e0       	ldi	r18, 0x0C	; 12
 4ec:	4f ef       	ldi	r20, 0xFF	; 255
 4ee:	6e 2f       	mov	r22, r30
 4f0:	30 2f       	mov	r19, r16
 4f2:	38 1b       	sub	r19, r24
 4f4:	83 2f       	mov	r24, r19
 4f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setAllSevenSegmentDisplayValues>
		
		if(temp <= 40 ){setHeaterDutyCycle(50); setCoolerDutyCycle(0); }
 4fa:	c9 32       	cpi	r28, 0x29	; 41
 4fc:	d1 05       	cpc	r29, r1
 4fe:	30 f4       	brcc	.+12     	; 0x50c <main+0xb6>
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setHeaterDutyCycle>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 0c 01 	call	0x218	; 0x218 <setCoolerDutyCycle>
		if(temp >= 70 ){setHeaterDutyCycle(0);  setCoolerDutyCycle(50);}
 50c:	c6 34       	cpi	r28, 0x46	; 70
 50e:	d1 05       	cpc	r29, r1
 510:	30 f0       	brcs	.+12     	; 0x51e <main+0xc8>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setHeaterDutyCycle>
 518:	82 e3       	ldi	r24, 0x32	; 50
 51a:	0e 94 0c 01 	call	0x218	; 0x218 <setCoolerDutyCycle>
		
		transmitUART_16bits('V'<<8 |'e'); transmitUART_16bits('l'<<8 |':'); transmitUART_8bits(' ');
 51e:	85 e6       	ldi	r24, 0x65	; 101
 520:	96 e5       	ldi	r25, 0x56	; 86
 522:	0e 94 f5 01 	call	0x3ea	; 0x3ea <transmitUART_16bits>
 526:	8a e3       	ldi	r24, 0x3A	; 58
 528:	9c e6       	ldi	r25, 0x6C	; 108
 52a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <transmitUART_16bits>
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	0e 94 ee 01 	call	0x3dc	; 0x3dc <transmitUART_8bits>
		sendASCIIFromInt(velResf); 
 534:	c6 01       	movw	r24, r12
 536:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sendASCIIFromInt>
		transmitUART_16bits('r'<<8 |'p'); transmitUART_16bits('m'<<8 |'\n');
 53a:	80 e7       	ldi	r24, 0x70	; 112
 53c:	92 e7       	ldi	r25, 0x72	; 114
 53e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <transmitUART_16bits>
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	9d e6       	ldi	r25, 0x6D	; 109
 546:	0e 94 f5 01 	call	0x3ea	; 0x3ea <transmitUART_16bits>
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	99 e6       	ldi	r25, 0x69	; 105
 54e:	28 e1       	ldi	r18, 0x18	; 24
 550:	81 50       	subi	r24, 0x01	; 1
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	20 40       	sbci	r18, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0xfa>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0x104>
 55a:	00 00       	nop
 55c:	87 cf       	rjmp	.-242    	; 0x46c <main+0x16>

0000055e <__udivmodsi4>:
 55e:	a1 e2       	ldi	r26, 0x21	; 33
 560:	1a 2e       	mov	r1, r26
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	fd 01       	movw	r30, r26
 568:	0d c0       	rjmp	.+26     	; 0x584 <__udivmodsi4_ep>

0000056a <__udivmodsi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	ee 1f       	adc	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	a2 17       	cp	r26, r18
 574:	b3 07       	cpc	r27, r19
 576:	e4 07       	cpc	r30, r20
 578:	f5 07       	cpc	r31, r21
 57a:	20 f0       	brcs	.+8      	; 0x584 <__udivmodsi4_ep>
 57c:	a2 1b       	sub	r26, r18
 57e:	b3 0b       	sbc	r27, r19
 580:	e4 0b       	sbc	r30, r20
 582:	f5 0b       	sbc	r31, r21

00000584 <__udivmodsi4_ep>:
 584:	66 1f       	adc	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	1a 94       	dec	r1
 58e:	69 f7       	brne	.-38     	; 0x56a <__udivmodsi4_loop>
 590:	60 95       	com	r22
 592:	70 95       	com	r23
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	9b 01       	movw	r18, r22
 59a:	ac 01       	movw	r20, r24
 59c:	bd 01       	movw	r22, r26
 59e:	cf 01       	movw	r24, r30
 5a0:	08 95       	ret

000005a2 <__umulhisi3>:
 5a2:	a2 9f       	mul	r26, r18
 5a4:	b0 01       	movw	r22, r0
 5a6:	b3 9f       	mul	r27, r19
 5a8:	c0 01       	movw	r24, r0
 5aa:	a3 9f       	mul	r26, r19
 5ac:	70 0d       	add	r23, r0
 5ae:	81 1d       	adc	r24, r1
 5b0:	11 24       	eor	r1, r1
 5b2:	91 1d       	adc	r25, r1
 5b4:	b2 9f       	mul	r27, r18
 5b6:	70 0d       	add	r23, r0
 5b8:	81 1d       	adc	r24, r1
 5ba:	11 24       	eor	r1, r1
 5bc:	91 1d       	adc	r25, r1
 5be:	08 95       	ret

000005c0 <__utoa_ncheck>:
 5c0:	bb 27       	eor	r27, r27

000005c2 <__utoa_common>:
 5c2:	fb 01       	movw	r30, r22
 5c4:	55 27       	eor	r21, r21
 5c6:	aa 27       	eor	r26, r26
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a4 17       	cp	r26, r20
 5d0:	10 f0       	brcs	.+4      	; 0x5d6 <__utoa_common+0x14>
 5d2:	a4 1b       	sub	r26, r20
 5d4:	83 95       	inc	r24
 5d6:	50 51       	subi	r21, 0x10	; 16
 5d8:	b9 f7       	brne	.-18     	; 0x5c8 <__utoa_common+0x6>
 5da:	a0 5d       	subi	r26, 0xD0	; 208
 5dc:	aa 33       	cpi	r26, 0x3A	; 58
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <__utoa_common+0x20>
 5e0:	a9 5d       	subi	r26, 0xD9	; 217
 5e2:	a1 93       	st	Z+, r26
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	79 f7       	brne	.-34     	; 0x5c6 <__utoa_common+0x4>
 5e8:	b1 11       	cpse	r27, r1
 5ea:	b1 93       	st	Z+, r27
 5ec:	11 92       	st	Z+, r1
 5ee:	cb 01       	movw	r24, r22
 5f0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <strrev>

000005f4 <strrev>:
 5f4:	dc 01       	movw	r26, r24
 5f6:	fc 01       	movw	r30, r24
 5f8:	67 2f       	mov	r22, r23
 5fa:	71 91       	ld	r23, Z+
 5fc:	77 23       	and	r23, r23
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <strrev+0x4>
 600:	32 97       	sbiw	r30, 0x02	; 2
 602:	04 c0       	rjmp	.+8      	; 0x60c <strrev+0x18>
 604:	7c 91       	ld	r23, X
 606:	6d 93       	st	X+, r22
 608:	70 83       	st	Z, r23
 60a:	62 91       	ld	r22, -Z
 60c:	ae 17       	cp	r26, r30
 60e:	bf 07       	cpc	r27, r31
 610:	c8 f3       	brcs	.-14     	; 0x604 <strrev+0x10>
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
