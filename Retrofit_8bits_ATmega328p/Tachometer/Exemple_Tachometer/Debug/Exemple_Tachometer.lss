
Exemple_Tachometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb2  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000666  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000262  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  88:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupHeatingCoolingSystem>:
    OCR0B = 0; // Resfriador
}

void setHeaterDutyCycle(uint8_t heaterDutyCycle){
    // Ajusta OCR1A proporcionalmente ao valor percentual
    OCR0A = (255 *(uint16_t)heaterDutyCycle) / 100 ;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 66       	ori	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
  96:	83 ea       	ldi	r24, 0xA3	; 163
  98:	84 bd       	out	0x24, r24	; 36
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	85 bd       	out	0x25, r24	; 37
  9e:	17 bc       	out	0x27, r1	; 39
  a0:	18 bc       	out	0x28, r1	; 40
  a2:	08 95       	ret

000000a4 <setCoolerDutyCycle>:
}

void setCoolerDutyCycle(uint8_t coolerDutyCycle){
    // Ajusta OCR1B proporcionalmente ao valor percentual
    OCR0B = (255 *(uint16_t)coolerDutyCycle) / 100;
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	82 9f       	mul	r24, r18
  a8:	c0 01       	movw	r24, r0
  aa:	11 24       	eor	r1, r1
  ac:	9c 01       	movw	r18, r24
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	36 95       	lsr	r19
  b4:	27 95       	ror	r18
  b6:	ab e7       	ldi	r26, 0x7B	; 123
  b8:	b4 e1       	ldi	r27, 0x14	; 20
  ba:	0e 94 07 01 	call	0x20e	; 0x20e <__umulhisi3>
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	88 bd       	out	0x28, r24	; 40
  c4:	08 95       	ret

000000c6 <setupUART>:

// Recebe um byte pela UART (bloqueante)
uint8_t receiveUART(void) {
	while (!(UCSR0A & (1 << RXC0))); // Aguarda dado recebido
	return UDR0;
}
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  da:	08 95       	ret

000000dc <transmitUART_8bits>:
  dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e0:	95 ff       	sbrs	r25, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <transmitUART_8bits>
  e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e8:	08 95       	ret

000000ea <sendASCIIFromInt>:

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <sendASCIIFromInt+0xa>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <sendASCIIFromInt+0xc>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <sendASCIIFromInt+0xe>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	be 01       	movw	r22, r28
 100:	6f 5f       	subi	r22, 0xFF	; 255
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	0e 94 16 01 	call	0x22c	; 0x22c <__itoa_ncheck>
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
 108:	8e 01       	movw	r16, r28
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	0a c0       	rjmp	.+20     	; 0x124 <sendASCIIFromInt+0x3a>
		transmitUART_8bits(*p);
 110:	0e 94 6e 00 	call	0xdc	; 0xdc <transmitUART_8bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <sendASCIIFromInt+0x2e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <sendASCIIFromInt+0x34>
 11e:	00 00       	nop

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	f8 01       	movw	r30, r16
 126:	80 81       	ld	r24, Z
 128:	81 11       	cpse	r24, r1
 12a:	f2 cf       	rjmp	.-28     	; 0x110 <sendASCIIFromInt+0x26>
		transmitUART_8bits(*p);
		_delay_ms(2);
	}
	transmitUART_8bits('\n');
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <transmitUART_8bits>
}
 132:	26 96       	adiw	r28, 0x06	; 6
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <__vector_10>:
#include <util/delay.h>

//Variáveis globais
uint16_t tempo_borda_subida = 0, tempo_delta = 0;

ISR(TIMER1_CAPT_vect){ //interrupção por captura do valor do TC1{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	 if(TCCR1B & (1<<ICES1))//lê o valor de contagem do TC1 na borda de subida do sinal
 15e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 162:	86 ff       	sbrs	r24, 6
 164:	09 c0       	rjmp	.+18     	; 0x178 <__vector_10+0x30>
	 tempo_borda_subida = ICR1;//salva a primeira contagem para determinar a largura do pulso
 166:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 16a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 16e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <tempo_borda_subida+0x1>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempo_borda_subida>
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <__vector_10+0x58>
	 else//lê o valor de contagem do TC1 na borda de descida do sinal
	 tempo_delta = (ICR1- tempo_borda_subida)*16; //cada incremento do TC1 corresponde a 16us
 178:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 17c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 180:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempo_borda_subida>
 184:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <tempo_borda_subida+0x1>
 188:	82 1b       	sub	r24, r18
 18a:	93 0b       	sbc	r25, r19
 18c:	82 95       	swap	r24
 18e:	92 95       	swap	r25
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	98 27       	eor	r25, r24
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	98 27       	eor	r25, r24
 198:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	 TCCR1B ^= (1<<ICES1); //inverte a borda de captura
 1a0:	e1 e8       	ldi	r30, 0x81	; 129
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	89 27       	eor	r24, r25
 1aa:	80 83       	st	Z, r24
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:

int main(void){
	
	setupUART(MYUBRR);
 1c2:	87 e6       	ldi	r24, 0x67	; 103
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 63 00 	call	0xc6	; 0xc6 <setupUART>
	setupHeatingCoolingSystem();
 1ca:	0e 94 48 00 	call	0x90	; 0x90 <setupHeatingCoolingSystem>
	
	//Configura GPIO
	DDRB &= 0b11111110;// Entrada no pino PB0 (Captura no PB0 (ICP1))
 1ce:	84 b1       	in	r24, 0x04	; 4
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00000001;// Pullups PB0 ativo
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 b9       	out	0x05, r24	; 5
	
	//Configura Timer
	TCCR1B = (1<<ICES1)|(1<<CS12);//Captura na borda de subida, TC1 com prescaler = 256.
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	//Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
	TIMSK1 = 1<<ICIE1;//habilita a interrupção por captura
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); //Habilita o flag de interrupções globais
 1e6:	78 94       	sei
	
	setCoolerDutyCycle(50);
 1e8:	82 e3       	ldi	r24, 0x32	; 50
 1ea:	0e 94 52 00 	call	0xa4	; 0xa4 <setCoolerDutyCycle>
	
	while (1){
		sendASCIIFromInt(tempo_delta);
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	0e 94 75 00 	call	0xea	; 0xea <sendASCIIFromInt>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x3e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x48>
 20a:	00 00       	nop
 20c:	f0 cf       	rjmp	.-32     	; 0x1ee <main+0x2c>

0000020e <__umulhisi3>:
 20e:	a2 9f       	mul	r26, r18
 210:	b0 01       	movw	r22, r0
 212:	b3 9f       	mul	r27, r19
 214:	c0 01       	movw	r24, r0
 216:	a3 9f       	mul	r26, r19
 218:	70 0d       	add	r23, r0
 21a:	81 1d       	adc	r24, r1
 21c:	11 24       	eor	r1, r1
 21e:	91 1d       	adc	r25, r1
 220:	b2 9f       	mul	r27, r18
 222:	70 0d       	add	r23, r0
 224:	81 1d       	adc	r24, r1
 226:	11 24       	eor	r1, r1
 228:	91 1d       	adc	r25, r1
 22a:	08 95       	ret

0000022c <__itoa_ncheck>:
 22c:	bb 27       	eor	r27, r27
 22e:	4a 30       	cpi	r20, 0x0A	; 10
 230:	31 f4       	brne	.+12     	; 0x23e <__itoa_ncheck+0x12>
 232:	99 23       	and	r25, r25
 234:	22 f4       	brpl	.+8      	; 0x23e <__itoa_ncheck+0x12>
 236:	bd e2       	ldi	r27, 0x2D	; 45
 238:	90 95       	com	r25
 23a:	81 95       	neg	r24
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	0c 94 22 01 	jmp	0x244	; 0x244 <__utoa_common>

00000242 <__utoa_ncheck>:
 242:	bb 27       	eor	r27, r27

00000244 <__utoa_common>:
 244:	fb 01       	movw	r30, r22
 246:	55 27       	eor	r21, r21
 248:	aa 27       	eor	r26, r26
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	aa 1f       	adc	r26, r26
 250:	a4 17       	cp	r26, r20
 252:	10 f0       	brcs	.+4      	; 0x258 <__utoa_common+0x14>
 254:	a4 1b       	sub	r26, r20
 256:	83 95       	inc	r24
 258:	50 51       	subi	r21, 0x10	; 16
 25a:	b9 f7       	brne	.-18     	; 0x24a <__utoa_common+0x6>
 25c:	a0 5d       	subi	r26, 0xD0	; 208
 25e:	aa 33       	cpi	r26, 0x3A	; 58
 260:	08 f0       	brcs	.+2      	; 0x264 <__utoa_common+0x20>
 262:	a9 5d       	subi	r26, 0xD9	; 217
 264:	a1 93       	st	Z+, r26
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	79 f7       	brne	.-34     	; 0x248 <__utoa_common+0x4>
 26a:	b1 11       	cpse	r27, r1
 26c:	b1 93       	st	Z+, r27
 26e:	11 92       	st	Z+, r1
 270:	cb 01       	movw	r24, r22
 272:	0c 94 3b 01 	jmp	0x276	; 0x276 <strrev>

00000276 <strrev>:
 276:	dc 01       	movw	r26, r24
 278:	fc 01       	movw	r30, r24
 27a:	67 2f       	mov	r22, r23
 27c:	71 91       	ld	r23, Z+
 27e:	77 23       	and	r23, r23
 280:	e1 f7       	brne	.-8      	; 0x27a <strrev+0x4>
 282:	32 97       	sbiw	r30, 0x02	; 2
 284:	04 c0       	rjmp	.+8      	; 0x28e <strrev+0x18>
 286:	7c 91       	ld	r23, X
 288:	6d 93       	st	X+, r22
 28a:	70 83       	st	Z, r23
 28c:	62 91       	ld	r22, -Z
 28e:	ae 17       	cp	r26, r30
 290:	bf 07       	cpc	r27, r31
 292:	c8 f3       	brcs	.-14     	; 0x286 <strrev+0x10>
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
