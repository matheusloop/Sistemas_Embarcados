
Exemple_Tachometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbe  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000774  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000331  00000000  00000000  00002a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 21 01 	call	0x242	; 0x242 <main>
  88:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupHeatingCoolingSystem>:
    OCR0B = 0; // Resfriador
}

void setHeaterDutyCycle(uint8_t heaterDutyCycle){
    // Ajusta OCR1A proporcionalmente ao valor percentual
    OCR0A = (255 *(uint16_t)heaterDutyCycle) / 100 ;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 66       	ori	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
  96:	83 ea       	ldi	r24, 0xA3	; 163
  98:	84 bd       	out	0x24, r24	; 36
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	85 bd       	out	0x25, r24	; 37
  9e:	17 bc       	out	0x27, r1	; 39
  a0:	18 bc       	out	0x28, r1	; 40
  a2:	08 95       	ret

000000a4 <setCoolerDutyCycle>:
}

void setCoolerDutyCycle(uint8_t coolerDutyCycle){
    // Ajusta OCR1B proporcionalmente ao valor percentual
    OCR0B = (255 *(uint16_t)coolerDutyCycle) / 100;
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	82 9f       	mul	r24, r18
  a8:	c0 01       	movw	r24, r0
  aa:	11 24       	eor	r1, r1
  ac:	9c 01       	movw	r18, r24
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	36 95       	lsr	r19
  b4:	27 95       	ror	r18
  b6:	ab e7       	ldi	r26, 0x7B	; 123
  b8:	b4 e1       	ldi	r27, 0x14	; 20
  ba:	0e 94 5f 01 	call	0x2be	; 0x2be <__umulhisi3>
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	88 bd       	out	0x28, r24	; 40
  c4:	08 95       	ret

000000c6 <setupUART>:

// Recebe um byte pela UART (bloqueante)
uint8_t receiveUART(void) {
	while (!(UCSR0A & (1 << RXC0))); // Aguarda dado recebido
	return UDR0;
}
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  da:	08 95       	ret

000000dc <transmitUART_8bits>:
  dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e0:	95 ff       	sbrs	r25, 5
  e2:	fc cf       	rjmp	.-8      	; 0xdc <transmitUART_8bits>
  e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e8:	08 95       	ret

000000ea <sendASCIIFromInt>:

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <sendASCIIFromInt+0xa>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <sendASCIIFromInt+0xc>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <sendASCIIFromInt+0xe>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	be 01       	movw	r22, r28
 100:	6f 5f       	subi	r22, 0xFF	; 255
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__itoa_ncheck>
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
 108:	8e 01       	movw	r16, r28
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	0a c0       	rjmp	.+20     	; 0x124 <sendASCIIFromInt+0x3a>
		transmitUART_8bits(*p);
 110:	0e 94 6e 00 	call	0xdc	; 0xdc <transmitUART_8bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <sendASCIIFromInt+0x2e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <sendASCIIFromInt+0x34>
 11e:	00 00       	nop

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	f8 01       	movw	r30, r16
 126:	80 81       	ld	r24, Z
 128:	81 11       	cpse	r24, r1
 12a:	f2 cf       	rjmp	.-28     	; 0x110 <sendASCIIFromInt+0x26>
		transmitUART_8bits(*p);
		_delay_ms(2);
	}
	transmitUART_8bits('\n');
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <transmitUART_8bits>
}
 132:	26 96       	adiw	r28, 0x06	; 6
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <__vector_10>:
#include <avr/interrupt.h>

volatile uint16_t ultima_captura = 0;
volatile uint32_t velRPM = 0;

ISR(TIMER1_CAPT_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	uint16_t dif_bordas = 0, captura_atual = 0;
	uint32_t T_ciclo = 0;

	captura_atual = ICR1;
 16a:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 16e:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	dif_bordas = captura_atual - ultima_captura;
 172:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ultima_captura>
 176:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ultima_captura+0x1>
 17a:	a9 01       	movw	r20, r18
 17c:	48 1b       	sub	r20, r24
 17e:	59 0b       	sbc	r21, r25
	ultima_captura = captura_atual;
 180:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <ultima_captura+0x1>
 184:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ultima_captura>

	T_ciclo = (uint32_t)dif_bordas * 16; // 16 us por incremento com prescaler 256
 188:	ca 01       	movw	r24, r20
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	aa 1f       	adc	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27

	velRPM = 60000000UL / (7 * T_ciclo); // 7 pulsos por volta
 1ae:	ac 01       	movw	r20, r24
 1b0:	bd 01       	movw	r22, r26
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	66 1f       	adc	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	66 1f       	adc	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	44 0f       	add	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	66 1f       	adc	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	9a 01       	movw	r18, r20
 1cc:	ab 01       	movw	r20, r22
 1ce:	28 1b       	sub	r18, r24
 1d0:	39 0b       	sbc	r19, r25
 1d2:	4a 0b       	sbc	r20, r26
 1d4:	5b 0b       	sbc	r21, r27
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	77 e8       	ldi	r23, 0x87	; 135
 1da:	83 e9       	ldi	r24, 0x93	; 147
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodsi4>
 1e2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ee:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <setupTachometer>:

void setupTachometer(){
	DDRB &= ~(1 << DDB0);    // PB0 como entrada
 214:	84 b1       	in	r24, 0x04	; 4
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0);  // Pull-up ativado
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	85 b9       	out	0x05, r24	; 5

	TCCR1B = (1 << ICES1) | (1 << CS12); // Captura na subida, prescaler 256
 220:	84 e4       	ldi	r24, 0x44	; 68
 222:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << ICIE1);               // Habilita interrupção por captura
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	sei(); // Interrupções globais
 22c:	78 94       	sei
 22e:	08 95       	ret

00000230 <getTachometerVelValue>:
}

uint32_t getTachometerVelValue(void){
	return velRPM;
 230:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 240:	08 95       	ret

00000242 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	setupUART(MYUBRR);
 242:	87 e6       	ldi	r24, 0x67	; 103
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 63 00 	call	0xc6	; 0xc6 <setupUART>
	setupHeatingCoolingSystem();
 24a:	0e 94 48 00 	call	0x90	; 0x90 <setupHeatingCoolingSystem>
	setupTachometer();
 24e:	0e 94 0a 01 	call	0x214	; 0x214 <setupTachometer>
	setupTachometer();
 252:	0e 94 0a 01 	call	0x214	; 0x214 <setupTachometer>
	
	setCoolerDutyCycle(20);
 256:	84 e1       	ldi	r24, 0x14	; 20
 258:	0e 94 52 00 	call	0xa4	; 0xa4 <setCoolerDutyCycle>
	
	while (1){
		sendASCIIFromInt(getTachometerVelValue());
 25c:	0e 94 18 01 	call	0x230	; 0x230 <getTachometerVelValue>
 260:	cb 01       	movw	r24, r22
 262:	0e 94 75 00 	call	0xea	; 0xea <sendASCIIFromInt>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	83 ed       	ldi	r24, 0xD3	; 211
 26a:	90 e3       	ldi	r25, 0x30	; 48
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x2a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x34>
 276:	00 00       	nop
 278:	f1 cf       	rjmp	.-30     	; 0x25c <main+0x1a>

0000027a <__udivmodsi4>:
 27a:	a1 e2       	ldi	r26, 0x21	; 33
 27c:	1a 2e       	mov	r1, r26
 27e:	aa 1b       	sub	r26, r26
 280:	bb 1b       	sub	r27, r27
 282:	fd 01       	movw	r30, r26
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <__udivmodsi4_ep>

00000286 <__udivmodsi4_loop>:
 286:	aa 1f       	adc	r26, r26
 288:	bb 1f       	adc	r27, r27
 28a:	ee 1f       	adc	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	a2 17       	cp	r26, r18
 290:	b3 07       	cpc	r27, r19
 292:	e4 07       	cpc	r30, r20
 294:	f5 07       	cpc	r31, r21
 296:	20 f0       	brcs	.+8      	; 0x2a0 <__udivmodsi4_ep>
 298:	a2 1b       	sub	r26, r18
 29a:	b3 0b       	sbc	r27, r19
 29c:	e4 0b       	sbc	r30, r20
 29e:	f5 0b       	sbc	r31, r21

000002a0 <__udivmodsi4_ep>:
 2a0:	66 1f       	adc	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	1a 94       	dec	r1
 2aa:	69 f7       	brne	.-38     	; 0x286 <__udivmodsi4_loop>
 2ac:	60 95       	com	r22
 2ae:	70 95       	com	r23
 2b0:	80 95       	com	r24
 2b2:	90 95       	com	r25
 2b4:	9b 01       	movw	r18, r22
 2b6:	ac 01       	movw	r20, r24
 2b8:	bd 01       	movw	r22, r26
 2ba:	cf 01       	movw	r24, r30
 2bc:	08 95       	ret

000002be <__umulhisi3>:
 2be:	a2 9f       	mul	r26, r18
 2c0:	b0 01       	movw	r22, r0
 2c2:	b3 9f       	mul	r27, r19
 2c4:	c0 01       	movw	r24, r0
 2c6:	a3 9f       	mul	r26, r19
 2c8:	70 0d       	add	r23, r0
 2ca:	81 1d       	adc	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	91 1d       	adc	r25, r1
 2d0:	b2 9f       	mul	r27, r18
 2d2:	70 0d       	add	r23, r0
 2d4:	81 1d       	adc	r24, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	91 1d       	adc	r25, r1
 2da:	08 95       	ret

000002dc <__itoa_ncheck>:
 2dc:	bb 27       	eor	r27, r27
 2de:	4a 30       	cpi	r20, 0x0A	; 10
 2e0:	31 f4       	brne	.+12     	; 0x2ee <__itoa_ncheck+0x12>
 2e2:	99 23       	and	r25, r25
 2e4:	22 f4       	brpl	.+8      	; 0x2ee <__itoa_ncheck+0x12>
 2e6:	bd e2       	ldi	r27, 0x2D	; 45
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__utoa_common>

000002f2 <__utoa_ncheck>:
 2f2:	bb 27       	eor	r27, r27

000002f4 <__utoa_common>:
 2f4:	fb 01       	movw	r30, r22
 2f6:	55 27       	eor	r21, r21
 2f8:	aa 27       	eor	r26, r26
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	aa 1f       	adc	r26, r26
 300:	a4 17       	cp	r26, r20
 302:	10 f0       	brcs	.+4      	; 0x308 <__utoa_common+0x14>
 304:	a4 1b       	sub	r26, r20
 306:	83 95       	inc	r24
 308:	50 51       	subi	r21, 0x10	; 16
 30a:	b9 f7       	brne	.-18     	; 0x2fa <__utoa_common+0x6>
 30c:	a0 5d       	subi	r26, 0xD0	; 208
 30e:	aa 33       	cpi	r26, 0x3A	; 58
 310:	08 f0       	brcs	.+2      	; 0x314 <__utoa_common+0x20>
 312:	a9 5d       	subi	r26, 0xD9	; 217
 314:	a1 93       	st	Z+, r26
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	79 f7       	brne	.-34     	; 0x2f8 <__utoa_common+0x4>
 31a:	b1 11       	cpse	r27, r1
 31c:	b1 93       	st	Z+, r27
 31e:	11 92       	st	Z+, r1
 320:	cb 01       	movw	r24, r22
 322:	0c 94 93 01 	jmp	0x326	; 0x326 <strrev>

00000326 <strrev>:
 326:	dc 01       	movw	r26, r24
 328:	fc 01       	movw	r30, r24
 32a:	67 2f       	mov	r22, r23
 32c:	71 91       	ld	r23, Z+
 32e:	77 23       	and	r23, r23
 330:	e1 f7       	brne	.-8      	; 0x32a <strrev+0x4>
 332:	32 97       	sbiw	r30, 0x02	; 2
 334:	04 c0       	rjmp	.+8      	; 0x33e <strrev+0x18>
 336:	7c 91       	ld	r23, X
 338:	6d 93       	st	X+, r22
 33a:	70 83       	st	Z, r23
 33c:	62 91       	ld	r22, -Z
 33e:	ae 17       	cp	r26, r30
 340:	bf 07       	cpc	r27, r31
 342:	c8 f3       	brcs	.-14     	; 0x336 <strrev+0x10>
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
