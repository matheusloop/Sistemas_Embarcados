
Exemple_Tachometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8a  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000248  00000000  00000000  0000255b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000027a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setCoolerDutyCycle>:
    OCR1A = (1023 / 100) * heaterDutyCycle;
}

void setCoolerDutyCycle(uint8_t coolerDutyCycle){
    // Ajusta OCR1B proporcionalmente ao valor percentual
    OCR1B = (1023 / 100) * coolerDutyCycle;
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9c 01       	movw	r18, r24
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	82 0f       	add	r24, r18
  a6:	93 1f       	adc	r25, r19
  a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  b0:	08 95       	ret

000000b2 <setupUART>:

// Recebe um byte pela UART (bloqueante)
uint8_t receiveUART(void) {
	while (!(UCSR0A & (1 << RXC0))); // Aguarda dado recebido
	return UDR0;
}
  b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  c0:	8e e0       	ldi	r24, 0x0E	; 14
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c6:	08 95       	ret

000000c8 <transmitUART_8bits>:
  c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  cc:	95 ff       	sbrs	r25, 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <transmitUART_8bits>
  d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d4:	08 95       	ret

000000d6 <sendASCIIFromInt>:

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <sendASCIIFromInt+0xa>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <sendASCIIFromInt+0xc>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <sendASCIIFromInt+0xe>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__itoa_ncheck>
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
  f4:	8e 01       	movw	r16, r28
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	0a c0       	rjmp	.+20     	; 0x110 <sendASCIIFromInt+0x3a>
		transmitUART_8bits(*p);
  fc:	0e 94 64 00 	call	0xc8	; 0xc8 <transmitUART_8bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	83 ef       	ldi	r24, 0xF3	; 243
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <sendASCIIFromInt+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <sendASCIIFromInt+0x34>
 10a:	00 00       	nop

// Envia número inteiro como string ASCII pela UART
void sendASCIIFromInt(uint16_t num) {
	char buffer[6];
	itoa(num, buffer, 10);
	for (char *p = buffer; *p; p++) {
 10c:	0f 5f       	subi	r16, 0xFF	; 255
 10e:	1f 4f       	sbci	r17, 0xFF	; 255
 110:	f8 01       	movw	r30, r16
 112:	80 81       	ld	r24, Z
 114:	81 11       	cpse	r24, r1
 116:	f2 cf       	rjmp	.-28     	; 0xfc <sendASCIIFromInt+0x26>
		transmitUART_8bits(*p);
		_delay_ms(2);
	}
	transmitUART_8bits('\n');
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	0e 94 64 00 	call	0xc8	; 0xc8 <transmitUART_8bits>
}
 11e:	26 96       	adiw	r28, 0x06	; 6
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <__vector_10>:
#include <util/delay.h>

//Variáveis globais
uint16_t tempo_borda_subida = 0;

ISR(TIMER1_CAPT_vect){ //interrupção por captura do valor do TC1{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	
	tempo_borda_subida = ICR1;//salva a primeira contagem para determinar a largura do pulso
 146:	e6 e8       	ldi	r30, 0x86	; 134
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ICR1 = 0;
 156:	11 82       	std	Z+1, r1	; 0x01
 158:	10 82       	st	Z, r1
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:
//Função para envio de um frame de 5 a 8bits
int main(void){
	
	setupUART(MYUBRR);
 16c:	87 e6       	ldi	r24, 0x67	; 103
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 59 00 	call	0xb2	; 0xb2 <setupUART>
	setCoolerDutyCycle(50);
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	0e 94 48 00 	call	0x90	; 0x90 <setCoolerDutyCycle>
	//Configura GPIO
	DDRB &= 0b11111110;// Entrada no pino PB0 (Captura no PB0 (ICP1))
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0b00000001;// Pullups PB0 ativo
 180:	85 b1       	in	r24, 0x05	; 5
 182:	81 60       	ori	r24, 0x01	; 1
 184:	85 b9       	out	0x05, r24	; 5
	
	TCCR1B = (1<<ICES1)|(1<<CS12);//Captura na borda de subida, TC1 com prescaler = 256.
 186:	84 e4       	ldi	r24, 0x44	; 68
 188:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	//Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
	TIMSK1 = 1<<ICIE1;//habilita a interrupção por captura
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); //Habilita o flag de interrupções globais
 192:	78 94       	sei
	
	
	while (1){
		sendASCIIFromInt(tempo_borda_subida);
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19c:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendASCIIFromInt>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	83 ed       	ldi	r24, 0xD3	; 211
 1a4:	90 e3       	ldi	r25, 0x30	; 48
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x44>
 1b0:	00 00       	nop
 1b2:	f0 cf       	rjmp	.-32     	; 0x194 <main+0x28>

000001b4 <__itoa_ncheck>:
 1b4:	bb 27       	eor	r27, r27
 1b6:	4a 30       	cpi	r20, 0x0A	; 10
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <__itoa_ncheck+0x12>
 1ba:	99 23       	and	r25, r25
 1bc:	22 f4       	brpl	.+8      	; 0x1c6 <__itoa_ncheck+0x12>
 1be:	bd e2       	ldi	r27, 0x2D	; 45
 1c0:	90 95       	com	r25
 1c2:	81 95       	neg	r24
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__utoa_common>

000001ca <__utoa_ncheck>:
 1ca:	bb 27       	eor	r27, r27

000001cc <__utoa_common>:
 1cc:	fb 01       	movw	r30, r22
 1ce:	55 27       	eor	r21, r21
 1d0:	aa 27       	eor	r26, r26
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	aa 1f       	adc	r26, r26
 1d8:	a4 17       	cp	r26, r20
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <__utoa_common+0x14>
 1dc:	a4 1b       	sub	r26, r20
 1de:	83 95       	inc	r24
 1e0:	50 51       	subi	r21, 0x10	; 16
 1e2:	b9 f7       	brne	.-18     	; 0x1d2 <__utoa_common+0x6>
 1e4:	a0 5d       	subi	r26, 0xD0	; 208
 1e6:	aa 33       	cpi	r26, 0x3A	; 58
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <__utoa_common+0x20>
 1ea:	a9 5d       	subi	r26, 0xD9	; 217
 1ec:	a1 93       	st	Z+, r26
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	79 f7       	brne	.-34     	; 0x1d0 <__utoa_common+0x4>
 1f2:	b1 11       	cpse	r27, r1
 1f4:	b1 93       	st	Z+, r27
 1f6:	11 92       	st	Z+, r1
 1f8:	cb 01       	movw	r24, r22
 1fa:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <strrev>

000001fe <strrev>:
 1fe:	dc 01       	movw	r26, r24
 200:	fc 01       	movw	r30, r24
 202:	67 2f       	mov	r22, r23
 204:	71 91       	ld	r23, Z+
 206:	77 23       	and	r23, r23
 208:	e1 f7       	brne	.-8      	; 0x202 <strrev+0x4>
 20a:	32 97       	sbiw	r30, 0x02	; 2
 20c:	04 c0       	rjmp	.+8      	; 0x216 <strrev+0x18>
 20e:	7c 91       	ld	r23, X
 210:	6d 93       	st	X+, r22
 212:	70 83       	st	Z, r23
 214:	62 91       	ld	r22, -Z
 216:	ae 17       	cp	r26, r30
 218:	bf 07       	cpc	r27, r31
 21a:	c8 f3       	brcs	.-14     	; 0x20e <strrev+0x10>
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
